

Microchip Technology PIC18 PRO Macro Assembler V1.35 build -356382666 
                                                                                               Sat Jan 30 16:55:57 2016

Microchip Technology Omniscient Code Generator v1.35 (PRO mode) build 201507080246
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    40                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    41  0000                     
    42                           	psect	smallconst
    43  000600                     __psmallconst:
    44                           	opt stack 0
    45  000600  00                 	db	0
    46  000601                     _octpowers:
    47                           	opt stack 0
    48  000601  0001               	dw	1
    49  000603  0008               	dw	8
    50  000605  0040               	dw	64
    51  000607  0200               	dw	512
    52  000609  1000               	dw	4096
    53  00060B  8000               	dw	32768
    54  00060D                     __end_of_octpowers:
    55                           	opt stack 0
    56  00060D                     _dpowers:
    57                           	opt stack 0
    58  00060D  0001               	dw	1
    59  00060F  000A               	dw	10
    60  000611  0064               	dw	100
    61  000613  03E8               	dw	1000
    62  000615  2710               	dw	10000
    63  000617                     __end_of_dpowers:
    64                           	opt stack 0
    65  000617                     _hexpowers:
    66                           	opt stack 0
    67  000617  0001               	dw	1
    68  000619  0010               	dw	16
    69  00061B  0100               	dw	256
    70  00061D  1000               	dw	4096
    71  00061F                     __end_of_hexpowers:
    72                           	opt stack 0
    73  00061F                     STR_3:
    74  00061F  30                 	db	48	;'0'
    75  000620  31                 	db	49	;'1'
    76  000621  32                 	db	50	;'2'
    77  000622  33                 	db	51	;'3'
    78  000623  34                 	db	52	;'4'
    79  000624  35                 	db	53	;'5'
    80  000625  36                 	db	54	;'6'
    81  000626  37                 	db	55	;'7'
    82  000627  38                 	db	56	;'8'
    83  000628  39                 	db	57	;'9'
    84  000629  41                 	db	65	;'A'
    85  00062A  42                 	db	66	;'B'
    86  00062B  43                 	db	67	;'C'
    87  00062C  44                 	db	68	;'D'
    88  00062D  45                 	db	69	;'E'
    89  00062E  46                 	db	70	;'F'
    90  00062F  00                 	db	0
    91  000630                     STR_4:
    92  000630  30                 	db	48	;'0'
    93  000631  31                 	db	49	;'1'
    94  000632  32                 	db	50	;'2'
    95  000633  33                 	db	51	;'3'
    96  000634  34                 	db	52	;'4'
    97  000635  35                 	db	53	;'5'
    98  000636  36                 	db	54	;'6'
    99  000637  37                 	db	55	;'7'
   100  000638  38                 	db	56	;'8'
   101  000639  39                 	db	57	;'9'
   102  00063A  61                 	db	97	;'a'
   103  00063B  62                 	db	98	;'b'
   104  00063C  63                 	db	99	;'c'
   105  00063D  64                 	db	100	;'d'
   106  00063E  65                 	db	101	;'e'
   107  00063F  66                 	db	102	;'f'
   108  000640  00                 	db	0
   109  000641                     STR_1:
   110  000641  7B                 	db	123
   111  000642  22                 	db	34
   112  000643  47                 	db	71	;'G'
   113  000644  50                 	db	80	;'P'
   114  000645  49                 	db	73	;'I'
   115  000646  4F                 	db	79	;'O'
   116  000647  31                 	db	49	;'1'
   117  000648  22                 	db	34
   118  000649  3A                 	db	58	;':'
   119  00064A  20                 	db	32
   120  00064B  25                 	db	37
   121  00064C  64                 	db	100	;'d'
   122  00064D  20                 	db	32
   123  00064E  7D                 	db	125
   124  00064F  00                 	db	0
   125  000650                     STR_2:
   126  000650  7B                 	db	123
   127  000651  22                 	db	34
   128  000652  41                 	db	65	;'A'
   129  000653  4E                 	db	78	;'N'
   130  000654  30                 	db	48	;'0'
   131  000655  22                 	db	34
   132  000656  3A                 	db	58	;':'
   133  000657  20                 	db	32
   134  000658  25                 	db	37
   135  000659  64                 	db	100	;'d'
   136  00065A  20                 	db	32
   137  00065B  7D                 	db	125
   138  00065C  00                 	db	0
   139                           
   140                           ; #config settings
   141  00065D  00                 	db	0	; dummy byte at the end
   142  0000                     
   143                           	psect	nvCOMRAM
   144  000058                     __pnvCOMRAM:
   145                           	opt stack 0
   146  000058                     _timer0ReloadVal16bit:
   147                           	opt stack 0
   148  000058                     	ds	2
   149  00005A                     _eusart1TxBufferRemaining:
   150                           	opt stack 0
   151  00005A                     	ds	1
   152  0000                     _ANSELA	set	3896
   153  0000                     _ANSELB	set	3897
   154  0000                     _ANSELC	set	3898
   155  0000                     _ANSELD	set	3899
   156  0000                     _ANSELE	set	3900
   157  0000                     _ADCON0	set	4034
   158  0000                     _ADCON0bits	set	4034
   159  0000                     _ADCON1	set	4033
   160  0000                     _ADCON2	set	4032
   161  0000                     _ADRESH	set	4036
   162  0000                     _ADRESL	set	4035
   163  0000                     _BAUD1CON	set	4024
   164  0000                     _INTCON2bits	set	4081
   165  0000                     _INTCONbits	set	4082
   166  0000                     _IPR1bits	set	3999
   167  0000                     _LATA	set	3977
   168  0000                     _LATB	set	3978
   169  0000                     _LATC	set	3979
   170  0000                     _LATD	set	3980
   171  0000                     _LATE	set	3981
   172  0000                     _OSCCON	set	4051
   173  0000                     _OSCCON2	set	4050
   174  0000                     _OSCTUNE	set	3995
   175  0000                     _PIE1bits	set	3997
   176  0000                     _PIR1bits	set	3998
   177  0000                     _PORTBbits	set	3969
   178  0000                     _RC1STA	set	4011
   179  0000                     _RC1STAbits	set	4011
   180  0000                     _RCONbits	set	4048
   181  0000                     _RCREG1	set	4014
   182  0000                     _SPBRG1	set	4015
   183  0000                     _SPBRGH1	set	4016
   184  0000                     _T0CON	set	4053
   185  0000                     _T0CONbits	set	4053
   186  0000                     _TMR0H	set	4055
   187  0000                     _TMR0L	set	4054
   188  0000                     _TRISA	set	3986
   189  0000                     _TRISB	set	3987
   190  0000                     _TRISC	set	3988
   191  0000                     _TRISD	set	3989
   192  0000                     _TRISE	set	3990
   193  0000                     _TX1STA	set	4012
   194  0000                     _TXREG1	set	4013
   195  0000                     _WPUB	set	3937
   196  0000                     _LATD0	set	31840
   197                           
   198                           	psect	cinit
   199  00104A                     __pcinit:
   200                           	opt stack 0
   201  00104A                     start_initialization:
   202                           	opt stack 0
   203  00104A                     __initialization:
   204                           	opt stack 0
   205                           
   206                           ; Clear objects allocated to COMRAM (48 bytes)
   207  00104A  EE00  F001         	lfsr	0,__pbssCOMRAM
   208  00104E  0E30               	movlw	48
   209  001050                     clear_0:
   210  001050  6AEE               	clrf	postinc0,c
   211  001052  06E8               	decf	wreg,f,c
   212  001054  E1FD               	bnz	clear_0
   213  001056                     end_of_initialization:
   214                           	opt stack 0
   215  001056                     __end_of__initialization:
   216                           	opt stack 0
   217  001056  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   218  001058  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   219  00105A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   220  00105C  6EF8               	movwf	tblptru,c
   221  00105E  0100               	movlb	0
   222  001060  EF47  F008         	goto	_main	;jump to C main() function
   223                           tblptru	equ	0xFF8
   224                           postinc0	equ	0xFEE
   225                           wreg	equ	0xFE8
   226                           
   227                           	psect	bssCOMRAM
   228  000001                     __pbssCOMRAM:
   229                           	opt stack 0
   230  000001                     _eusart1RxBuffer:
   231                           	opt stack 0
   232  000001                     	ds	8
   233  000009                     _eusart1TxBuffer:
   234                           	opt stack 0
   235  000009                     	ds	8
   236  000011                     TMR0_ISR@CountCallBack:
   237                           	opt stack 0
   238  000011                     	ds	2
   239  000013                     _Pot:
   240                           	opt stack 0
   241  000013                     	ds	2
   242  000015                     _TimerCallBackON:
   243                           	opt stack 0
   244  000015                     	ds	1
   245  000016                     _aux:
   246                           	opt stack 0
   247  000016                     	ds	1
   248  000017                     _eusart1RxCount:
   249                           	opt stack 0
   250  000017                     	ds	1
   251  000018                     _eusart1RxHead:
   252                           	opt stack 0
   253  000018                     	ds	1
   254  000019                     _eusart1RxTail:
   255                           	opt stack 0
   256  000019                     	ds	1
   257  00001A                     _eusart1TxHead:
   258                           	opt stack 0
   259  00001A                     	ds	1
   260  00001B                     _eusart1TxTail:
   261                           	opt stack 0
   262  00001B                     	ds	1
   263  00001C                     _flag:
   264                           	opt stack 0
   265  00001C                     	ds	1
   266  00001D                     _dta:
   267                           	opt stack 0
   268  00001D                     	ds	20
   269                           tblptru	equ	0xFF8
   270                           postinc0	equ	0xFEE
   271                           wreg	equ	0xFE8
   272                           
   273                           	psect	cstackBANK0
   274  000060                     __pcstackBANK0:
   275                           	opt stack 0
   276  000060                     app@adcRes:
   277                           	opt stack 0
   278                           
   279                           ; 2 bytes @ 0x0
   280  000060                     	ds	2
   281  000062                     app@rec:
   282                           	opt stack 0
   283                           
   284                           ; 1 bytes @ 0x2
   285  000062                     	ds	1
   286                           tblptru	equ	0xFF8
   287                           postinc0	equ	0xFEE
   288                           wreg	equ	0xFE8
   289                           
   290                           	psect	cstackCOMRAM
   291  000031                     __pcstackCOMRAM:
   292                           	opt stack 0
   293  000031                     ??_INTERRUPT_InterruptManager:
   294  000031                     
   295                           ; 1 bytes @ 0x0
   296  000031                     	ds	2
   297  000033                     ??_UART_Received:
   298  000033                     ??_isdigit:
   299  000033                     ?_ADC_GetConversion:
   300                           	opt stack 0
   301  000033                     ?___wmul:
   302                           	opt stack 0
   303  000033                     ?___lwdiv:
   304                           	opt stack 0
   305  000033                     EUSART1_Read@readValue:
   306                           	opt stack 0
   307  000033                     EUSART1_Write@txData:
   308                           	opt stack 0
   309  000033                     delayMs@time:
   310                           	opt stack 0
   311  000033                     ___wmul@multiplier:
   312                           	opt stack 0
   313  000033                     ___lwdiv@dividend:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x2
   317  000033                     	ds	1
   318  000034                     putch@txData:
   319                           	opt stack 0
   320  000034                     _isdigit$1223:
   321                           	opt stack 0
   322                           
   323                           ; 1 bytes @ 0x3
   324  000034                     	ds	1
   325  000035                     ??_delayMs:
   326  000035                     ??_ADC_GetConversion:
   327  000035                     UART_Received@rec:
   328                           	opt stack 0
   329  000035                     isdigit@c:
   330                           	opt stack 0
   331  000035                     ___wmul@multiplicand:
   332                           	opt stack 0
   333  000035                     ___lwdiv@divisor:
   334                           	opt stack 0
   335                           
   336                           ; 2 bytes @ 0x4
   337  000035                     	ds	1
   338  000036                     delayMs@i:
   339                           	opt stack 0
   340                           
   341                           ; 2 bytes @ 0x5
   342  000036                     	ds	1
   343  000037                     ADC_GetConversion@channel:
   344                           	opt stack 0
   345  000037                     ___lwdiv@counter:
   346                           	opt stack 0
   347  000037                     ___wmul@product:
   348                           	opt stack 0
   349                           
   350                           ; 2 bytes @ 0x6
   351  000037                     	ds	1
   352  000038                     ___lwdiv@quotient:
   353                           	opt stack 0
   354                           
   355                           ; 2 bytes @ 0x7
   356  000038                     	ds	2
   357  00003A                     ?___lwmod:
   358                           	opt stack 0
   359  00003A                     ___lwmod@dividend:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x9
   363  00003A                     	ds	2
   364  00003C                     ___lwmod@divisor:
   365                           	opt stack 0
   366                           
   367                           ; 2 bytes @ 0xB
   368  00003C                     	ds	2
   369  00003E                     ___lwmod@counter:
   370                           	opt stack 0
   371                           
   372                           ; 1 bytes @ 0xD
   373  00003E                     	ds	1
   374  00003F                     ?_printf:
   375                           	opt stack 0
   376                           
   377                           ; 2 bytes @ 0xE
   378  00003F                     	ds	2
   379  000041                     ??_printf:
   380                           
   381                           ; 0 bytes @ 0x10
   382  000041                     	ds	4
   383  000045                     printf@idx:
   384                           	opt stack 0
   385                           
   386                           ; 1 bytes @ 0x14
   387  000045                     	ds	1
   388  000046                     _printf$992:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x15
   392  000046                     	ds	2
   393  000048                     _printf$993:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x17
   397  000048                     	ds	2
   398  00004A                     printf@cp:
   399                           	opt stack 0
   400                           
   401                           ; 1 bytes @ 0x19
   402  00004A                     	ds	1
   403  00004B                     _printf$999:
   404                           	opt stack 0
   405                           
   406                           ; 1 bytes @ 0x1A
   407  00004B                     	ds	1
   408  00004C                     printf@len:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0x1B
   412  00004C                     	ds	2
   413  00004E                     printf@ap:
   414                           	opt stack 0
   415                           
   416                           ; 1 bytes @ 0x1D
   417  00004E                     	ds	1
   418  00004F                     printf@val:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x1E
   422  00004F                     	ds	2
   423  000051                     printf@f:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0x20
   427  000051                     	ds	1
   428  000052                     printf@prec:
   429                           	opt stack 0
   430                           
   431                           ; 1 bytes @ 0x21
   432  000052                     	ds	1
   433  000053                     printf@width:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x22
   437  000053                     	ds	2
   438  000055                     printf@c:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x24
   442  000055                     	ds	1
   443  000056                     printf@flag:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x25
   447  000056                     	ds	2
   448  000058                     tblptru	equ	0xFF8
   449                           postinc0	equ	0xFEE
   450                           wreg	equ	0xFE8
   451                           
   452                           ; 0 bytes @ 0x27
   453 ;;
   454 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   455 ;;
   456 ;; *************** function _main *****************
   457 ;; Defined at:
   458 ;;		line 53 in file "main.c"
   459 ;; Parameters:    Size  Location     Type
   460 ;;		None
   461 ;; Auto vars:     Size  Location     Type
   462 ;;		None
   463 ;; Return value:  Size  Location     Type
   464 ;;		None               void
   465 ;; Registers used:
   466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   467 ;; Tracked objects:
   468 ;;		On entry : 0/0
   469 ;;		On exit  : 0/0
   470 ;;		Unchanged: 0/0
   471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   472 ;;      Params:         0       0       0       0       0       0       0
   473 ;;      Locals:         0       0       0       0       0       0       0
   474 ;;      Temps:          0       0       0       0       0       0       0
   475 ;;      Totals:         0       0       0       0       0       0       0
   476 ;;Total ram usage:        0 bytes
   477 ;; Hardware stack levels required when called:    7
   478 ;; This function calls:
   479 ;;		_SYSTEM_Initialize
   480 ;;		_app
   481 ;; This function is called by:
   482 ;;		Startup code after reset
   483 ;; This function uses a non-reentrant model
   484 ;;
   485                           
   486                           	psect	text0
   487  00108E                     __ptext0:
   488                           	opt stack 0
   489  00108E                     _main:
   490                           	opt stack 24
   491                           
   492                           ;main.c: 55: SYSTEM_Initialize();
   493                           
   494                           ;incstack = 0
   495  00108E  EC32  F008         	call	_SYSTEM_Initialize	;wreg free
   496                           
   497                           ; BSR set to: 15
   498                           ;main.c: 62: (INTCONbits.GIEH = 1);
   499  001092  8EF2               	bsf	intcon,7,c	;volatile
   500                           
   501                           ; BSR set to: 15
   502                           ;main.c: 65: (INTCONbits.GIEL = 1);
   503  001094  8CF2               	bsf	intcon,6,c	;volatile
   504  001096                     l2588:
   505                           
   506                           ;main.c: 87: app();
   507  001096  EC65  F006         	call	_app	;wreg free
   508  00109A  D7FD               	goto	l2588
   509  00109C                     __end_of_main:
   510                           	opt stack 0
   511                           tblptru	equ	0xFF8
   512                           intcon	equ	0xFF2
   513                           postinc0	equ	0xFEE
   514                           wreg	equ	0xFE8
   515                           
   516 ;; *************** function _app *****************
   517 ;; Defined at:
   518 ;;		line 5 in file "app.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;		None
   521 ;; Auto vars:     Size  Location     Type
   522 ;;  adcRes          2    0[BANK0 ] unsigned int 
   523 ;;  rec             1    2[BANK0 ] unsigned char 
   524 ;; Return value:  Size  Location     Type
   525 ;;		None               void
   526 ;; Registers used:
   527 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   528 ;; Tracked objects:
   529 ;;		On entry : 0/F
   530 ;;		On exit  : 0/0
   531 ;;		Unchanged: 0/0
   532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   533 ;;      Params:         0       0       0       0       0       0       0
   534 ;;      Locals:         0       3       0       0       0       0       0
   535 ;;      Temps:          0       0       0       0       0       0       0
   536 ;;      Totals:         0       3       0       0       0       0       0
   537 ;;Total ram usage:        3 bytes
   538 ;; Hardware stack levels used:    1
   539 ;; Hardware stack levels required when called:    6
   540 ;; This function calls:
   541 ;;		_ADC_GetConversion
   542 ;;		_EUSART1_Read
   543 ;;		_UART_Received
   544 ;;		_delayMs
   545 ;;		_printf
   546 ;; This function is called by:
   547 ;;		_main
   548 ;; This function uses a non-reentrant model
   549 ;;
   550                           
   551                           	psect	text1
   552  000CCA                     __ptext1:
   553                           	opt stack 0
   554  000CCA                     _app:
   555                           	opt stack 24
   556                           
   557                           ;app.c: 8: if(PORTBbits.RB0 == 0 && flag == 0)
   558                           
   559                           ;incstack = 0
   560  000CCA  B081               	btfsc	3969,0,c	;volatile
   561  000CCC  D016               	goto	l2562
   562  000CCE  501C               	movf	_flag,w,c
   563  000CD0  E114               	bnz	l2562
   564                           
   565                           ;app.c: 9: {
   566                           ;app.c: 11: do { LATD0 = ~LATD0; } while(0);
   567  000CD2  B08C               	btfsc	3980,0,c	;volatile
   568  000CD4  D002               	goto	u2790
   569  000CD6  808C               	bsf	3980,0,c	;volatile
   570  000CD8  D001               	goto	l2556
   571  000CDA                     u2790:
   572  000CDA  908C               	bcf	3980,0,c	;volatile
   573  000CDC                     l2556:
   574  000CDC  0E01               	movlw	1
   575                           
   576                           ;app.c: 13: printf("{\"GPIO1\": %d }", LATD0);
   577  000CDE  A08C               	btfss	3980,0,c	;volatile
   578  000CE0  0E00               	movlw	0
   579  000CE2  6E3F               	movwf	?_printf,c
   580  000CE4  6A40               	clrf	?_printf+1,c
   581  000CE6  0E41               	movlw	STR_1& (0+255)
   582  000CE8  EC2F  F003         	call	_printf
   583                           
   584                           ;app.c: 17: delayMs(80);
   585  000CEC  6A34               	clrf	delayMs@time+1,c
   586  000CEE  0E50               	movlw	80
   587  000CF0  6E33               	movwf	delayMs@time,c
   588  000CF2  ECB0  F007         	call	_delayMs	;wreg free
   589                           
   590                           ;app.c: 18: flag = 1;
   591  000CF6  0E01               	movlw	1
   592  000CF8  6E1C               	movwf	_flag,c
   593  000CFA                     l2562:
   594                           
   595                           ;app.c: 19: }
   596                           ;app.c: 20: if(PORTBbits.RB0 == 1 && flag == 1)
   597  000CFA  A081               	btfss	3969,0,c	;volatile
   598  000CFC  D008               	goto	l2570
   599  000CFE  041C               	decf	_flag,w,c
   600  000D00  E106               	bnz	l2570
   601                           
   602                           ;app.c: 21: {
   603                           ;app.c: 22: flag = 0;
   604  000D02  6A1C               	clrf	_flag,c
   605                           
   606                           ;app.c: 23: delayMs(80);
   607  000D04  6A34               	clrf	delayMs@time+1,c
   608  000D06  0E50               	movlw	80
   609  000D08  6E33               	movwf	delayMs@time,c
   610  000D0A  ECB0  F007         	call	_delayMs	;wreg free
   611  000D0E                     l2570:
   612                           
   613                           ;app.c: 24: }
   614                           ;app.c: 28: if((eusart1RxCount) > 0)
   615  000D0E  5017               	movf	_eusart1RxCount,w,c	;volatile
   616  000D10  E007               	bz	l2574
   617                           
   618                           ;app.c: 29: {
   619                           ;app.c: 30: uint8_t rec = EUSART1_Read();
   620  000D12  ECC2  F007         	call	_EUSART1_Read	;wreg free
   621  000D16  0100               	movlb	0	; () banked
   622  000D18  6F62               	movwf	app@rec& (0+255),b
   623                           
   624                           ;app.c: 31: UART_Received(rec);
   625  000D1A  5162               	movf	app@rec& (0+255),w,b
   626  000D1C  ECA3  F006         	call	_UART_Received
   627  000D20                     l2574:
   628                           
   629                           ;app.c: 33: }
   630                           ;app.c: 36: if(TimerCallBackON == 1)
   631  000D20  0415               	decf	_TimerCallBackON,w,c	;volatile
   632  000D22  A4D8               	btfss	status,2,c
   633  000D24  0012               	return	
   634                           
   635                           ;app.c: 37: {
   636                           ;app.c: 38: uint16_t adcRes = ADC_GetConversion(0);
   637  000D26  0E00               	movlw	0
   638  000D28  EC5A  F007         	call	_ADC_GetConversion
   639  000D2C  C033  F060         	movff	?_ADC_GetConversion,app@adcRes
   640  000D30  C034  F061         	movff	?_ADC_GetConversion+1,app@adcRes+1
   641                           
   642                           ;app.c: 39: printf((const char*)"{\"AN0\": %d }", adcRes);
   643  000D34  C060  F03F         	movff	app@adcRes,?_printf
   644  000D38  C061  F040         	movff	app@adcRes+1,?_printf+1
   645  000D3C  0E50               	movlw	STR_2& (0+255)
   646  000D3E  EC2F  F003         	call	_printf
   647                           
   648                           ;app.c: 41: TimerCallBackON = 0;
   649  000D42  6A15               	clrf	_TimerCallBackON,c	;volatile
   650  000D44  0012               	return		;funcret
   651  000D46                     __end_of_app:
   652                           	opt stack 0
   653                           tblptru	equ	0xFF8
   654                           intcon	equ	0xFF2
   655                           postinc0	equ	0xFEE
   656                           wreg	equ	0xFE8
   657                           status	equ	0xFD8
   658                           
   659 ;; *************** function _printf *****************
   660 ;; Defined at:
   661 ;;		line 464 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\doprnt.c"
   662 ;; Parameters:    Size  Location     Type
   663 ;;  f               1    wreg     PTR const unsigned char 
   664 ;;		 -> STR_2(13), STR_1(15), 
   665 ;; Auto vars:     Size  Location     Type
   666 ;;  f               1   32[COMRAM] PTR const unsigned char 
   667 ;;		 -> STR_2(13), STR_1(15), 
   668 ;;  idx             1   20[COMRAM] unsigned char 
   669 ;;  tmpval          4    0        struct .
   670 ;;  flag            2   37[COMRAM] unsigned short 
   671 ;;  width           2   34[COMRAM] int 
   672 ;;  val             2   30[COMRAM] unsigned int 
   673 ;;  len             2   27[COMRAM] unsigned int 
   674 ;;  c               1   36[COMRAM] char 
   675 ;;  prec            1   33[COMRAM] char 
   676 ;;  ap              1   29[COMRAM] PTR void [1]
   677 ;;		 -> ?_printf(2), 
   678 ;;  cp              1   25[COMRAM] PTR const unsigned char 
   679 ;;		 -> printf@c(1), 
   680 ;; Return value:  Size  Location     Type
   681 ;;                  2   14[COMRAM] int 
   682 ;; Registers used:
   683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   684 ;; Tracked objects:
   685 ;;		On entry : 0/F
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   689 ;;      Params:         2       0       0       0       0       0       0
   690 ;;      Locals:        19       0       0       0       0       0       0
   691 ;;      Temps:          4       0       0       0       0       0       0
   692 ;;      Totals:        25       0       0       0       0       0       0
   693 ;;Total ram usage:       25 bytes
   694 ;; Hardware stack levels used:    1
   695 ;; Hardware stack levels required when called:    5
   696 ;; This function calls:
   697 ;;		___lwdiv
   698 ;;		___lwmod
   699 ;;		___wmul
   700 ;;		_isdigit
   701 ;;		_putch
   702 ;; This function is called by:
   703 ;;		_app
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707                           	psect	text2
   708  00065E                     __ptext2:
   709                           	opt stack 0
   710  00065E                     _printf:
   711                           	opt stack 24
   712                           
   713                           ;incstack = 0
   714                           ;printf@f stored from wreg
   715  00065E  6E51               	movwf	printf@f,c
   716                           
   717                           ;doprnt.c: 466: va_list ap;
   718                           ;doprnt.c: 499: signed char c;
   719                           ;doprnt.c: 501: int width;
   720                           ;doprnt.c: 506: signed char prec;
   721                           ;doprnt.c: 508: unsigned short flag;
   722                           ;doprnt.c: 523: union {
   723                           ;doprnt.c: 524: unsigned long vd;
   724                           ;doprnt.c: 525: double integ;
   725                           ;doprnt.c: 526: } tmpval;
   726                           ;doprnt.c: 528: unsigned int val;
   727                           ;doprnt.c: 529: unsigned len;
   728                           ;doprnt.c: 530: const char * cp;
   729                           ;doprnt.c: 533: *ap = __va_start();
   730  000660  0E3F               	movlw	low ?_printf
   731  000662  6E4E               	movwf	printf@ap,c
   732                           
   733                           ;doprnt.c: 536: while(c = *f++) {
   734  000664  D324               	goto	l2508
   735  000666                     l2220:
   736                           
   737                           ;doprnt.c: 538: if(c != '%')
   738  000666  0E25               	movlw	37
   739  000668  1855               	xorwf	printf@c,w,c
   740  00066A  E004               	bz	l329
   741                           
   742                           ;doprnt.c: 540: {
   743                           ;doprnt.c: 541: (putch(c) );
   744  00066C  5055               	movf	printf@c,w,c
   745  00066E  EC59  F008         	call	_putch
   746                           
   747                           ;doprnt.c: 542: continue;
   748  000672  D31D               	goto	l2508
   749  000674                     l329:
   750                           
   751                           ;doprnt.c: 543: }
   752                           ;doprnt.c: 546: width = 0;
   753  000674  6A53               	clrf	printf@width,c
   754  000676  6A54               	clrf	printf@width+1,c
   755                           
   756                           ;doprnt.c: 548: flag = 0;
   757  000678  6A56               	clrf	printf@flag,c
   758  00067A  6A57               	clrf	printf@flag+1,c
   759  00067C  D008               	goto	l2234
   760  00067E                     l2224:
   761                           
   762                           ;doprnt.c: 554: flag |= 0x08;
   763  00067E  8656               	bsf	printf@flag,3,c
   764  000680  D005               	goto	L1
   765  000682                     l2226:
   766                           
   767                           ;doprnt.c: 561: flag |= 0x01;
   768  000682  8056               	bsf	printf@flag,0,c
   769  000684  D003               	goto	L1
   770  000686                     l2228:
   771                           
   772                           ;doprnt.c: 574: flag |= 0x800;
   773  000686  8657               	bsf	printf@flag+1,3,c
   774  000688  D001               	goto	L1
   775  00068A                     l2230:
   776                           
   777                           ;doprnt.c: 580: flag |= 0x04;
   778  00068A  8456               	bsf	printf@flag,2,c
   779  00068C                     L1:
   780                           
   781                           ;doprnt.c: 581: f++;
   782  00068C  2A51               	incf	printf@f,f,c
   783  00068E                     l2234:
   784  00068E  C051  FFF6         	movff	printf@f,tblptrl
   785  000692                     	if	1	;There is more than 1 active tblptr byte
   786  000692  0E06               	movlw	high __smallconst
   787  000694  6EF7               	movwf	tblptrh,c
   788  000696                     	endif
   789  000696                     	if	0	;tblptru may be non-zero
   790  000696                     	endif
   791  000696                     	if	0	;tblptru may be non-zero
   792  000696                     	endif
   793  000696  0008               	tblrd		*
   794  000698  50F5               	movf	tablat,w,c
   795                           
   796                           ; Switch size 1, requested type "speed"
   797                           ; Number of cases is 4, Range of values is 32 to 48
   798                           ; switch strategies available:
   799                           ; Name         Instructions Cycles
   800                           ; simple_byte           13     7 (average)
   801                           ;	Chosen strategy is simple_byte
   802  00069A  0A20               	xorlw	32	; case 32
   803  00069C  E0F2               	bz	l2226
   804  00069E  0A03               	xorlw	3	; case 35
   805  0006A0  E0F2               	bz	l2228
   806  0006A2  0A0E               	xorlw	14	; case 45
   807  0006A4  E0EC               	bz	l2224
   808  0006A6  0A1D               	xorlw	29	; case 48
   809  0006A8  E0F0               	bz	l2230
   810                           
   811                           ;doprnt.c: 593: if(flag & 0x08)
   812  0006AA  B656               	btfsc	printf@flag,3,c
   813                           
   814                           ;doprnt.c: 594: flag &= ~0x04;
   815  0006AC  9456               	bcf	printf@flag,2,c
   816                           
   817                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
   818  0006AE  C051  FFF6         	movff	printf@f,tblptrl
   819  0006B2                     	if	1	;There is more than 1 active tblptr byte
   820  0006B2  0E06               	movlw	high __smallconst
   821  0006B4  6EF7               	movwf	tblptrh,c
   822  0006B6                     	endif
   823  0006B6                     	if	0	;tblptru may be non-zero
   824  0006B6                     	endif
   825  0006B6                     	if	0	;tblptru may be non-zero
   826  0006B6                     	endif
   827  0006B6  0008               	tblrd		*
   828  0006B8  50F5               	movf	tablat,w,c
   829  0006BA  EC09  F008         	call	_isdigit
   830  0006BE  E32D               	bnc	l2250
   831                           
   832                           ;doprnt.c: 598: width = 0;
   833  0006C0  6A53               	clrf	printf@width,c
   834  0006C2  6A54               	clrf	printf@width+1,c
   835  0006C4                     l2242:
   836                           
   837                           ;doprnt.c: 600: width *= 10;
   838  0006C4  C053  F033         	movff	printf@width,___wmul@multiplier
   839  0006C8  C054  F034         	movff	printf@width+1,___wmul@multiplier+1
   840  0006CC  6A36               	clrf	___wmul@multiplicand+1,c
   841  0006CE  0E0A               	movlw	10
   842  0006D0  6E35               	movwf	___wmul@multiplicand,c
   843  0006D2  EC9D  F007         	call	___wmul	;wreg free
   844  0006D6  C033  F053         	movff	?___wmul,printf@width
   845  0006DA  C034  F054         	movff	?___wmul+1,printf@width+1
   846                           
   847                           ;doprnt.c: 601: width += *f++ - '0';
   848  0006DE  0ED0               	movlw	208
   849  0006E0  6E41               	movwf	??_printf& (0+255),c
   850  0006E2  6842               	setf	(??_printf+1)& (0+255),c
   851  0006E4  C051  FFF6         	movff	printf@f,tblptrl
   852  0006E8                     	if	1	;There is more than 1 active tblptr byte
   853  0006E8  0E06               	movlw	high __smallconst
   854  0006EA  6EF7               	movwf	tblptrh,c
   855  0006EC                     	endif
   856  0006EC                     	if	0	;tblptru may be non-zero
   857  0006EC                     	endif
   858  0006EC                     	if	0	;tblptru may be non-zero
   859  0006EC                     	endif
   860  0006EC  0008               	tblrd		*
   861  0006EE  50F5               	movf	tablat,w,c
   862  0006F0  6E43               	movwf	(??_printf+2)& (0+255),c
   863  0006F2  6A44               	clrf	(??_printf+3)& (0+255),c
   864  0006F4  5041               	movf	??_printf,w,c
   865  0006F6  2643               	addwf	??_printf+2,f,c
   866  0006F8  5042               	movf	??_printf+1,w,c
   867  0006FA  2244               	addwfc	??_printf+3,f,c
   868  0006FC  5043               	movf	??_printf+2,w,c
   869  0006FE  2653               	addwf	printf@width,f,c
   870  000700  5044               	movf	??_printf+3,w,c
   871  000702  2254               	addwfc	printf@width+1,f,c
   872  000704  2A51               	incf	printf@f,f,c
   873                           
   874                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
   875  000706  C051  FFF6         	movff	printf@f,tblptrl
   876  00070A                     	if	1	;There is more than 1 active tblptr byte
   877  00070A  0E06               	movlw	high __smallconst
   878  00070C  6EF7               	movwf	tblptrh,c
   879  00070E                     	endif
   880  00070E                     	if	0	;tblptru may be non-zero
   881  00070E                     	endif
   882  00070E                     	if	0	;tblptru may be non-zero
   883  00070E                     	endif
   884  00070E  0008               	tblrd		*
   885  000710  50F5               	movf	tablat,w,c
   886  000712  EC09  F008         	call	_isdigit
   887  000716  E313               	bnc	l2258
   888  000718  D7D5               	goto	l2242
   889  00071A                     l2250:
   890  00071A  C051  FFF6         	movff	printf@f,tblptrl
   891  00071E                     	if	1	;There is more than 1 active tblptr byte
   892  00071E  0E06               	movlw	high __smallconst
   893  000720  6EF7               	movwf	tblptrh,c
   894  000722                     	endif
   895  000722                     	if	0	;tblptru may be non-zero
   896  000722                     	endif
   897  000722                     	if	0	;tblptru may be non-zero
   898  000722                     	endif
   899  000722  0008               	tblrd		*
   900  000724  50F5               	movf	tablat,w,c
   901  000726  0A2A               	xorlw	42
   902  000728  E10A               	bnz	l2258
   903                           
   904                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
   905  00072A  504E               	movf	printf@ap,w,c
   906  00072C  6ED9               	movwf	fsr2l,c
   907  00072E  6ADA               	clrf	fsr2h,c
   908  000730  CFDE F053          	movff	postinc2,printf@width
   909  000734  CFDD F054          	movff	postdec2,printf@width+1
   910  000738  0E02               	movlw	2
   911  00073A  264E               	addwf	printf@ap,f,c
   912                           
   913                           ;doprnt.c: 606: f++;
   914  00073C  2A51               	incf	printf@f,f,c
   915  00073E                     l2258:
   916                           
   917                           ;doprnt.c: 608: }
   918                           ;doprnt.c: 611: if(*f == '.') {
   919  00073E  C051  FFF6         	movff	printf@f,tblptrl
   920  000742                     	if	1	;There is more than 1 active tblptr byte
   921  000742  0E06               	movlw	high __smallconst
   922  000744  6EF7               	movwf	tblptrh,c
   923  000746                     	endif
   924  000746                     	if	0	;tblptru may be non-zero
   925  000746                     	endif
   926  000746                     	if	0	;tblptru may be non-zero
   927  000746                     	endif
   928  000746  0008               	tblrd		*
   929  000748  50F5               	movf	tablat,w,c
   930  00074A  0A2E               	xorlw	46
   931  00074C  E12D               	bnz	l345
   932                           
   933                           ;doprnt.c: 612: flag |= 0x4000;
   934  00074E  8C57               	bsf	printf@flag+1,6,c
   935                           
   936                           ;doprnt.c: 613: f++;
   937  000750  2A51               	incf	printf@f,f,c
   938                           
   939                           ;doprnt.c: 615: if(*f == '*') {
   940  000752  C051  FFF6         	movff	printf@f,tblptrl
   941  000756                     	if	1	;There is more than 1 active tblptr byte
   942  000756  0E06               	movlw	high __smallconst
   943  000758  6EF7               	movwf	tblptrh,c
   944  00075A                     	endif
   945  00075A                     	if	0	;tblptru may be non-zero
   946  00075A                     	endif
   947  00075A                     	if	0	;tblptru may be non-zero
   948  00075A                     	endif
   949  00075A  0008               	tblrd		*
   950  00075C  50F5               	movf	tablat,w,c
   951  00075E  0A2A               	xorlw	42
   952  000760  E109               	bnz	l346
   953                           
   954                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
   955  000762  504E               	movf	printf@ap,w,c
   956  000764  6ED9               	movwf	fsr2l,c
   957  000766  6ADA               	clrf	fsr2h,c
   958  000768  50DF               	movf	indf2,w,c
   959  00076A  6E52               	movwf	printf@prec,c
   960  00076C  0E02               	movlw	2
   961  00076E  264E               	addwf	printf@ap,f,c
   962                           
   963                           ;doprnt.c: 617: f++;
   964  000770  2A51               	incf	printf@f,f,c
   965                           
   966                           ;doprnt.c: 618: } else
   967  000772  D07A               	goto	l2320
   968  000774                     l346:
   969                           
   970                           ;doprnt.c: 620: {
   971                           ;doprnt.c: 621: prec = 0;
   972  000774  6A52               	clrf	printf@prec,c
   973                           
   974                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
   975  000776  D00E               	goto	l2274
   976  000778                     l2270:
   977                           
   978                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
   979  000778  C051  FFF6         	movff	printf@f,tblptrl
   980  00077C                     	if	1	;There is more than 1 active tblptr byte
   981  00077C  0E06               	movlw	high __smallconst
   982  00077E  6EF7               	movwf	tblptrh,c
   983  000780                     	endif
   984  000780                     	if	0	;tblptru may be non-zero
   985  000780                     	endif
   986  000780                     	if	0	;tblptru may be non-zero
   987  000780                     	endif
   988  000780  0008               	tblrd		*
   989  000782  CFF5 F041          	movff	tablat,??_printf
   990  000786  5052               	movf	printf@prec,w,c
   991  000788  0D0A               	mullw	10
   992  00078A  50F3               	movf	prodl,w,c
   993  00078C  2441               	addwf	??_printf,w,c
   994  00078E  0FD0               	addlw	208
   995  000790  6E52               	movwf	printf@prec,c
   996  000792  2A51               	incf	printf@f,f,c
   997  000794                     l2274:
   998  000794  C051  FFF6         	movff	printf@f,tblptrl
   999  000798                     	if	1	;There is more than 1 active tblptr byte
  1000  000798  0E06               	movlw	high __smallconst
  1001  00079A  6EF7               	movwf	tblptrh,c
  1002  00079C                     	endif
  1003  00079C                     	if	0	;tblptru may be non-zero
  1004  00079C                     	endif
  1005  00079C                     	if	0	;tblptru may be non-zero
  1006  00079C                     	endif
  1007  00079C  0008               	tblrd		*
  1008  00079E  50F5               	movf	tablat,w,c
  1009  0007A0  EC09  F008         	call	_isdigit
  1010  0007A4  E361               	bnc	l2320
  1011  0007A6  D7E8               	goto	l2270
  1012  0007A8                     l345:
  1013                           
  1014                           ;doprnt.c: 626: prec = 0;
  1015  0007A8  6A52               	clrf	printf@prec,c
  1016  0007AA  D05E               	goto	l2320
  1017  0007AC                     l2276:
  1018                           
  1019                           ;doprnt.c: 691: flag |= 0x40;
  1020  0007AC  8C56               	bsf	printf@flag,6,c
  1021                           
  1022                           ;doprnt.c: 693: break;
  1023  0007AE  D078               	goto	l2322
  1024  0007B0                     l2278:
  1025                           
  1026                           ;doprnt.c: 714: flag |= 0x20;
  1027  0007B0  8A56               	bsf	printf@flag,5,c
  1028  0007B2                     l360:
  1029                           
  1030                           ;doprnt.c: 721: flag |= 0x80;
  1031  0007B2  8E56               	bsf	printf@flag,7,c
  1032                           
  1033                           ;doprnt.c: 723: break;
  1034  0007B4  D075               	goto	l2322
  1035  0007B6                     l2280:
  1036                           
  1037                           ;doprnt.c: 753: if(prec && prec < len)
  1038  0007B6  5052               	movf	printf@prec,w,c
  1039  0007B8  E00F               	bz	l2286
  1040  0007BA  C052  F041         	movff	printf@prec,??_printf
  1041  0007BE  6A42               	clrf	(??_printf+1)& (0+255),c
  1042  0007C0  BE41               	btfsc	??_printf& (0+255),7,c
  1043  0007C2  0642               	decf	(??_printf+1)& (0+255),f,c
  1044  0007C4  504C               	movf	printf@len,w,c
  1045  0007C6  5C41               	subwf	??_printf,w,c
  1046  0007C8  504D               	movf	printf@len+1,w,c
  1047  0007CA  5842               	subwfb	??_printf+1,w,c
  1048  0007CC  E205               	bc	l2286
  1049                           
  1050                           ;doprnt.c: 754: len = prec;
  1051  0007CE  5052               	movf	printf@prec,w,c
  1052  0007D0  6E4C               	movwf	printf@len,c
  1053  0007D2  6A4D               	clrf	printf@len+1,c
  1054  0007D4  BE4C               	btfsc	printf@len,7,c
  1055  0007D6  064D               	decf	printf@len+1,f,c
  1056  0007D8                     l2286:
  1057                           
  1058                           ;doprnt.c: 757: if(width > len)
  1059  0007D8  5053               	movf	printf@width,w,c
  1060  0007DA  5C4C               	subwf	printf@len,w,c
  1061  0007DC  5054               	movf	printf@width+1,w,c
  1062  0007DE  584D               	subwfb	printf@len+1,w,c
  1063  0007E0  E205               	bc	l363
  1064                           
  1065                           ;doprnt.c: 758: width -= len;
  1066  0007E2  504C               	movf	printf@len,w,c
  1067  0007E4  5E53               	subwf	printf@width,f,c
  1068  0007E6  504D               	movf	printf@len+1,w,c
  1069  0007E8  5A54               	subwfb	printf@width+1,f,c
  1070  0007EA  D002               	goto	l364
  1071  0007EC                     l363:
  1072                           
  1073                           ;doprnt.c: 759: else
  1074                           ;doprnt.c: 760: width = 0;
  1075  0007EC  6A53               	clrf	printf@width,c
  1076  0007EE  6A54               	clrf	printf@width+1,c
  1077  0007F0                     l364:
  1078                           
  1079                           ;doprnt.c: 762: if(!(flag & 0x08))
  1080  0007F0  B656               	btfsc	printf@flag,3,c
  1081  0007F2  D013               	goto	l2300
  1082  0007F4  D003               	goto	l2294
  1083  0007F6                     l2292:
  1084                           
  1085                           ;doprnt.c: 765: (putch(' ') );
  1086  0007F6  0E20               	movlw	32
  1087  0007F8  EC59  F008         	call	_putch
  1088  0007FC                     l2294:
  1089  0007FC  0653               	decf	printf@width,f,c
  1090  0007FE  A0D8               	btfss	status,0,c
  1091  000800  0654               	decf	printf@width+1,f,c
  1092  000802  2853               	incf	printf@width,w,c
  1093  000804  E1F8               	bnz	l2292
  1094  000806  2854               	incf	printf@width+1,w,c
  1095  000808  E008               	bz	l2300
  1096  00080A  D7F5               	goto	l2292
  1097  00080C                     l2296:
  1098                           
  1099                           ;doprnt.c: 768: (putch(*cp++) );
  1100  00080C  504A               	movf	printf@cp,w,c
  1101  00080E  6ED9               	movwf	fsr2l,c
  1102  000810  6ADA               	clrf	fsr2h,c
  1103  000812  50DF               	movf	indf2,w,c
  1104  000814  EC59  F008         	call	_putch
  1105  000818  2A4A               	incf	printf@cp,f,c
  1106  00081A                     l2300:
  1107  00081A  064C               	decf	printf@len,f,c
  1108  00081C  A0D8               	btfss	status,0,c
  1109  00081E  064D               	decf	printf@len+1,f,c
  1110  000820  284C               	incf	printf@len,w,c
  1111  000822  E1F4               	bnz	l2296
  1112  000824  284D               	incf	printf@len+1,w,c
  1113  000826  E1F2               	bnz	l2296
  1114                           
  1115                           ;doprnt.c: 770: if(flag & 0x08)
  1116  000828  A656               	btfss	printf@flag,3,c
  1117  00082A  D241               	goto	l2508
  1118  00082C  D003               	goto	l2306
  1119  00082E                     l2304:
  1120                           
  1121                           ;doprnt.c: 772: (putch(' ') );
  1122  00082E  0E20               	movlw	32
  1123  000830  EC59  F008         	call	_putch
  1124  000834                     l2306:
  1125  000834  0653               	decf	printf@width,f,c
  1126  000836  A0D8               	btfss	status,0,c
  1127  000838  0654               	decf	printf@width+1,f,c
  1128  00083A  2853               	incf	printf@width,w,c
  1129  00083C  E1F8               	bnz	l2304
  1130  00083E  2854               	incf	printf@width+1,w,c
  1131  000840  E101 D235          	bz	l2508
  1132  000844  D7F4               	goto	l2304
  1133  000846                     l2308:
  1134                           
  1135                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  1136  000846  504E               	movf	printf@ap,w,c
  1137  000848  6ED9               	movwf	fsr2l,c
  1138  00084A  6ADA               	clrf	fsr2h,c
  1139  00084C  50DF               	movf	indf2,w,c
  1140  00084E  6E55               	movwf	printf@c,c
  1141  000850  0E02               	movlw	2
  1142  000852  264E               	addwf	printf@ap,f,c
  1143  000854                     l2312:
  1144                           
  1145                           ;doprnt.c: 805: cp = (char *)&c;
  1146  000854  0E55               	movlw	low printf@c
  1147  000856  6E4A               	movwf	printf@cp,c
  1148                           
  1149                           ;doprnt.c: 806: len = 1;
  1150  000858  0E00               	movlw	0
  1151  00085A  6E4D               	movwf	printf@len+1,c
  1152  00085C  0E01               	movlw	1
  1153  00085E  6E4C               	movwf	printf@len,c
  1154                           
  1155                           ;doprnt.c: 807: goto dostring;
  1156  000860  D7AA               	goto	l2280
  1157  000862                     l2316:
  1158                           
  1159                           ;doprnt.c: 818: flag |= 0xC0;
  1160  000862  0EC0               	movlw	192
  1161  000864  1256               	iorwf	printf@flag,f,c
  1162                           
  1163                           ;doprnt.c: 819: break;
  1164  000866  D01C               	goto	l2322
  1165  000868                     l2320:
  1166  000868  2A51               	incf	printf@f,f,c
  1167  00086A  0451               	decf	printf@f,w,c
  1168  00086C  6E41               	movwf	??_printf& (0+255),c
  1169  00086E  C041  FFF6         	movff	??_printf,tblptrl
  1170  000872                     	if	1	;There is more than 1 active tblptr byte
  1171  000872  0E06               	movlw	high __smallconst
  1172  000874  6EF7               	movwf	tblptrh,c
  1173  000876                     	endif
  1174  000876                     	if	0	;tblptru may be non-zero
  1175  000876                     	endif
  1176  000876                     	if	0	;tblptru may be non-zero
  1177  000876                     	endif
  1178  000876  0008               	tblrd		*
  1179  000878  CFF5 F055          	movff	tablat,printf@c
  1180  00087C  5055               	movf	printf@c,w,c
  1181                           
  1182                           ; Switch size 1, requested type "speed"
  1183                           ; Number of cases is 8, Range of values is 0 to 120
  1184                           ; switch strategies available:
  1185                           ; Name         Instructions Cycles
  1186                           ; simple_byte           25    13 (average)
  1187                           ;	Chosen strategy is simple_byte
  1188  00087E  B4D8               	btfsc	status,2,c
  1189  000880  0012               	return	
  1190  000882  0A58               	xorlw	88	; case 88
  1191  000884  E095               	bz	l2278
  1192  000886  0A3B               	xorlw	59	; case 99
  1193  000888  E0DE               	bz	l2308
  1194  00088A  0A07               	xorlw	7	; case 100
  1195  00088C  E009               	bz	l2322
  1196  00088E  0A0D               	xorlw	13	; case 105
  1197  000890  E007               	bz	l2322
  1198  000892  0A06               	xorlw	6	; case 111
  1199  000894  E08B               	bz	l2276
  1200  000896  0A1A               	xorlw	26	; case 117
  1201  000898  E0E4               	bz	l2316
  1202  00089A  0A0D               	xorlw	13	; case 120
  1203  00089C  E08A               	bz	l360
  1204  00089E  D7DA               	goto	l2312
  1205  0008A0                     l2322:
  1206                           
  1207                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  1208  0008A0  C056  F041         	movff	printf@flag,??_printf
  1209  0008A4  0EC0               	movlw	192
  1210  0008A6  1641               	andwf	??_printf,f,c
  1211  0008A8  E112               	bnz	l2334
  1212                           
  1213                           ;doprnt.c: 1253: {
  1214                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1215  0008AA  504E               	movf	printf@ap,w,c
  1216  0008AC  6ED9               	movwf	fsr2l,c
  1217  0008AE  6ADA               	clrf	fsr2h,c
  1218  0008B0  CFDE F04F          	movff	postinc2,printf@val
  1219  0008B4  CFDD F050          	movff	postdec2,printf@val+1
  1220  0008B8  0E02               	movlw	2
  1221  0008BA  264E               	addwf	printf@ap,f,c
  1222                           
  1223                           ;doprnt.c: 1261: if((int)val < 0) {
  1224  0008BC  AE50               	btfss	printf@val+1,7,c
  1225  0008BE  D010               	goto	l2338
  1226                           
  1227                           ;doprnt.c: 1262: flag |= 0x03;
  1228  0008C0  0E03               	movlw	3
  1229  0008C2  1256               	iorwf	printf@flag,f,c
  1230                           
  1231                           ;doprnt.c: 1263: val = -val;
  1232  0008C4  6C4F               	negf	printf@val,c
  1233  0008C6  1E50               	comf	printf@val+1,f,c
  1234  0008C8  B0D8               	btfsc	status,0,c
  1235  0008CA  2A50               	incf	printf@val+1,f,c
  1236  0008CC  D009               	goto	l2338
  1237  0008CE                     l2334:
  1238                           
  1239                           ;doprnt.c: 1268: else
  1240                           ;doprnt.c: 1273: {
  1241                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1242  0008CE  504E               	movf	printf@ap,w,c
  1243  0008D0  6ED9               	movwf	fsr2l,c
  1244  0008D2  6ADA               	clrf	fsr2h,c
  1245  0008D4  CFDE F04F          	movff	postinc2,printf@val
  1246  0008D8  CFDD F050          	movff	postdec2,printf@val+1
  1247  0008DC  0E02               	movlw	2
  1248  0008DE  264E               	addwf	printf@ap,f,c
  1249  0008E0                     l2338:
  1250                           
  1251                           ;doprnt.c: 1287: }
  1252                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  1253  0008E0  5052               	movf	printf@prec,w,c
  1254  0008E2  E14A               	bnz	l2388
  1255  0008E4  504F               	movf	printf@val,w,c
  1256  0008E6  1050               	iorwf	printf@val+1,w,c
  1257  0008E8  E147               	bnz	l2388
  1258                           
  1259                           ;doprnt.c: 1291: prec++;
  1260  0008EA  2A52               	incf	printf@prec,f,c
  1261  0008EC  D045               	goto	l2388
  1262  0008EE                     l2344:
  1263                           
  1264                           ;doprnt.c: 1302: case 0xC0:
  1265                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1266  0008EE  0E01               	movlw	1
  1267  0008F0  6E55               	movwf	printf@c,c
  1268  0008F2                     l2346:
  1269  0008F2  0E05               	movlw	5
  1270  0008F4  1855               	xorwf	printf@c,w,c
  1271  0008F6  E049               	bz	l2390
  1272                           
  1273                           ;doprnt.c: 1306: if(val < dpowers[c])
  1274  0008F8  5055               	movf	printf@c,w,c
  1275  0008FA  0D02               	mullw	2
  1276  0008FC  50F3               	movf	prodl,w,c
  1277  0008FE  0F0D               	addlw	low _dpowers
  1278  000900  6E41               	movwf	??_printf& (0+255),c
  1279  000902  C041  FFF6         	movff	??_printf,tblptrl
  1280  000906                     	if	1	;There is more than 1 active tblptr byte
  1281  000906  0E06               	movlw	high __smallconst
  1282  000908  6EF7               	movwf	tblptrh,c
  1283  00090A                     	endif
  1284  00090A                     	if	0	;tblptru may be non-zero
  1285  00090A                     	endif
  1286  00090A                     	if	0	;tblptru may be non-zero
  1287  00090A                     	endif
  1288  00090A  0009               	tblrd		*+
  1289  00090C  50F5               	movf	tablat,w,c
  1290  00090E  5C4F               	subwf	printf@val,w,c
  1291  000910  0009               	tblrd		*+
  1292  000912  50F5               	movf	tablat,w,c
  1293  000914  5850               	subwfb	printf@val+1,w,c
  1294  000916  E339               	bnc	l2390
  1295  000918  2A55               	incf	printf@c,f,c
  1296  00091A  D7EB               	goto	l2346
  1297  00091C                     l2358:
  1298                           
  1299                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1300  00091C  0E01               	movlw	1
  1301  00091E  6E55               	movwf	printf@c,c
  1302  000920                     l2360:
  1303  000920  0E04               	movlw	4
  1304  000922  1855               	xorwf	printf@c,w,c
  1305  000924  E032               	bz	l2390
  1306                           
  1307                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1308  000926  5055               	movf	printf@c,w,c
  1309  000928  0D02               	mullw	2
  1310  00092A  50F3               	movf	prodl,w,c
  1311  00092C  0F17               	addlw	low _hexpowers
  1312  00092E  6E41               	movwf	??_printf& (0+255),c
  1313  000930  C041  FFF6         	movff	??_printf,tblptrl
  1314  000934                     	if	1	;There is more than 1 active tblptr byte
  1315  000934  0E06               	movlw	high __smallconst
  1316  000936  6EF7               	movwf	tblptrh,c
  1317  000938                     	endif
  1318  000938                     	if	0	;tblptru may be non-zero
  1319  000938                     	endif
  1320  000938                     	if	0	;tblptru may be non-zero
  1321  000938                     	endif
  1322  000938  0009               	tblrd		*+
  1323  00093A  50F5               	movf	tablat,w,c
  1324  00093C  5C4F               	subwf	printf@val,w,c
  1325  00093E  0009               	tblrd		*+
  1326  000940  50F5               	movf	tablat,w,c
  1327  000942  5850               	subwfb	printf@val+1,w,c
  1328  000944  E322               	bnc	l2390
  1329  000946  2A55               	incf	printf@c,f,c
  1330  000948  D7EB               	goto	l2360
  1331  00094A                     l2372:
  1332                           
  1333                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  1334  00094A  0E01               	movlw	1
  1335  00094C  6E55               	movwf	printf@c,c
  1336  00094E                     l2374:
  1337  00094E  0E06               	movlw	6
  1338  000950  1855               	xorwf	printf@c,w,c
  1339  000952  E01B               	bz	l2390
  1340                           
  1341                           ;doprnt.c: 1329: if(val < octpowers[c])
  1342  000954  5055               	movf	printf@c,w,c
  1343  000956  0D02               	mullw	2
  1344  000958  50F3               	movf	prodl,w,c
  1345  00095A  0F01               	addlw	low _octpowers
  1346  00095C  6E41               	movwf	??_printf& (0+255),c
  1347  00095E  C041  FFF6         	movff	??_printf,tblptrl
  1348  000962                     	if	1	;There is more than 1 active tblptr byte
  1349  000962  0E06               	movlw	high __smallconst
  1350  000964  6EF7               	movwf	tblptrh,c
  1351  000966                     	endif
  1352  000966                     	if	0	;tblptru may be non-zero
  1353  000966                     	endif
  1354  000966                     	if	0	;tblptru may be non-zero
  1355  000966                     	endif
  1356  000966  0009               	tblrd		*+
  1357  000968  50F5               	movf	tablat,w,c
  1358  00096A  5C4F               	subwf	printf@val,w,c
  1359  00096C  0009               	tblrd		*+
  1360  00096E  50F5               	movf	tablat,w,c
  1361  000970  5850               	subwfb	printf@val+1,w,c
  1362  000972  E30B               	bnc	l2390
  1363  000974  2A55               	incf	printf@c,f,c
  1364  000976  D7EB               	goto	l2374
  1365  000978                     l2388:
  1366  000978  5056               	movf	printf@flag,w,c
  1367  00097A  0BC0               	andlw	192
  1368                           
  1369                           ; Switch size 1, requested type "speed"
  1370                           ; Number of cases is 4, Range of values is 0 to 192
  1371                           ; switch strategies available:
  1372                           ; Name         Instructions Cycles
  1373                           ; simple_byte           13     7 (average)
  1374                           ;	Chosen strategy is simple_byte
  1375  00097C  E0B8               	bz	l2344
  1376  00097E  0A40               	xorlw	64	; case 64
  1377  000980  E0E4               	bz	l2372
  1378  000982  0AC0               	xorlw	192	; case 128
  1379  000984  E0CB               	bz	l2358
  1380  000986  0A40               	xorlw	64	; case 192
  1381  000988  E0B2               	bz	l2344
  1382  00098A                     l2390:
  1383                           
  1384                           ;doprnt.c: 1339: if(c < prec)
  1385  00098A  5055               	movf	printf@c,w,c
  1386  00098C  0A80               	xorlw	128
  1387  00098E  6E41               	movwf	??_printf& (0+255),c
  1388  000990  5052               	movf	printf@prec,w,c
  1389  000992  0A80               	xorlw	128
  1390  000994  5C41               	subwf	??_printf& (0+255),w,c
  1391  000996  E203               	bc	l2394
  1392                           
  1393                           ;doprnt.c: 1340: c = prec;
  1394  000998  C052  F055         	movff	printf@prec,printf@c
  1395  00099C  D009               	goto	l2398
  1396  00099E                     l2394:
  1397                           
  1398                           ;doprnt.c: 1341: else if(prec < c)
  1399  00099E  5052               	movf	printf@prec,w,c
  1400  0009A0  0A80               	xorlw	128
  1401  0009A2  6E41               	movwf	??_printf& (0+255),c
  1402  0009A4  5055               	movf	printf@c,w,c
  1403  0009A6  0A80               	xorlw	128
  1404  0009A8  5C41               	subwf	??_printf& (0+255),w,c
  1405  0009AA  E202               	bc	l2398
  1406                           
  1407                           ;doprnt.c: 1342: prec = c;
  1408  0009AC  C055  F052         	movff	printf@c,printf@prec
  1409  0009B0                     l2398:
  1410                           
  1411                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1412  0009B0  5053               	movf	printf@width,w,c
  1413  0009B2  1054               	iorwf	printf@width+1,w,c
  1414  0009B4  E008               	bz	l2404
  1415  0009B6  C056  F041         	movff	printf@flag,??_printf
  1416  0009BA  0E03               	movlw	3
  1417  0009BC  1641               	andwf	??_printf,f,c
  1418  0009BE  E003               	bz	l2404
  1419                           
  1420                           ;doprnt.c: 1346: width--;
  1421  0009C0  0653               	decf	printf@width,f,c
  1422  0009C2  A0D8               	btfss	status,0,c
  1423  0009C4  0654               	decf	printf@width+1,f,c
  1424  0009C6                     l2404:
  1425                           
  1426                           ;doprnt.c: 1348: if(flag & 0x4000) {
  1427  0009C6  AC57               	btfss	printf@flag+1,6,c
  1428  0009C8  D013               	goto	l2410
  1429                           
  1430                           ;doprnt.c: 1349: if(width > prec)
  1431  0009CA  0E80               	movlw	128
  1432  0009CC  BE52               	btfsc	printf@prec,7,c
  1433  0009CE  0E7F               	movlw	127
  1434  0009D0  6E41               	movwf	??_printf& (0+255),c
  1435  0009D2  5053               	movf	printf@width,w,c
  1436  0009D4  5C52               	subwf	printf@prec,w,c
  1437  0009D6  5054               	movf	printf@width+1,w,c
  1438  0009D8  0A80               	xorlw	128
  1439  0009DA  5841               	subwfb	??_printf& (0+255),w,c
  1440  0009DC  E207               	bc	l403
  1441                           
  1442                           ;doprnt.c: 1350: width -= prec;
  1443  0009DE  5052               	movf	printf@prec,w,c
  1444  0009E0  5E53               	subwf	printf@width,f,c
  1445  0009E2  0E00               	movlw	0
  1446  0009E4  BE52               	btfsc	printf@prec,7,c
  1447  0009E6  0EFF               	movlw	255
  1448  0009E8  5A54               	subwfb	printf@width+1,f,c
  1449  0009EA  D002               	goto	l2410
  1450  0009EC                     l403:
  1451                           
  1452                           ;doprnt.c: 1351: else
  1453                           ;doprnt.c: 1352: width = 0;
  1454  0009EC  6A53               	clrf	printf@width,c
  1455  0009EE  6A54               	clrf	printf@width+1,c
  1456  0009F0                     l2410:
  1457                           
  1458                           ;doprnt.c: 1353: }
  1459                           ;doprnt.c: 1357: if((flag & (
  1460                           ;doprnt.c: 1359: 0x04|
  1461                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  1462  0009F0  0EC4               	movlw	196
  1463  0009F2  6E41               	movwf	??_printf& (0+255),c
  1464  0009F4  0E08               	movlw	8
  1465  0009F6  6E42               	movwf	(??_printf+1)& (0+255),c
  1466  0009F8  C056  F043         	movff	printf@flag,??_printf+2
  1467  0009FC  C057  F044         	movff	printf@flag+1,??_printf+3
  1468  000A00  5041               	movf	??_printf,w,c
  1469  000A02  1643               	andwf	??_printf+2,f,c
  1470  000A04  5042               	movf	??_printf+1,w,c
  1471  000A06  1644               	andwf	??_printf+3,f,c
  1472  000A08  0E40               	movlw	64
  1473  000A0A  1843               	xorwf	??_printf+2,w,c
  1474  000A0C  E10A               	bnz	l2416
  1475  000A0E  0E08               	movlw	8
  1476  000A10  1844               	xorwf	??_printf+3,w,c
  1477  000A12  E107               	bnz	l2416
  1478                           
  1479                           ;doprnt.c: 1362: if(width)
  1480  000A14  5053               	movf	printf@width,w,c
  1481  000A16  1054               	iorwf	printf@width+1,w,c
  1482  000A18  E024               	bz	l2422
  1483                           
  1484                           ;doprnt.c: 1363: width--;
  1485  000A1A  0653               	decf	printf@width,f,c
  1486  000A1C  A0D8               	btfss	status,0,c
  1487  000A1E  0654               	decf	printf@width+1,f,c
  1488  000A20  D020               	goto	l2422
  1489  000A22                     l2416:
  1490                           
  1491                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  1492  000A22  0EC0               	movlw	192
  1493  000A24  6E41               	movwf	??_printf& (0+255),c
  1494  000A26  0E08               	movlw	8
  1495  000A28  6E42               	movwf	(??_printf+1)& (0+255),c
  1496  000A2A  C056  F043         	movff	printf@flag,??_printf+2
  1497  000A2E  C057  F044         	movff	printf@flag+1,??_printf+3
  1498  000A32  5041               	movf	??_printf,w,c
  1499  000A34  1643               	andwf	??_printf+2,f,c
  1500  000A36  5042               	movf	??_printf+1,w,c
  1501  000A38  1644               	andwf	??_printf+3,f,c
  1502  000A3A  0E80               	movlw	128
  1503  000A3C  1843               	xorwf	??_printf+2,w,c
  1504  000A3E  E111               	bnz	l2422
  1505  000A40  0E08               	movlw	8
  1506  000A42  1844               	xorwf	??_printf+3,w,c
  1507  000A44  E10E               	bnz	l2422
  1508                           
  1509                           ;doprnt.c: 1372: if(width > 2)
  1510  000A46  BE54               	btfsc	printf@width+1,7,c
  1511  000A48  D00A               	goto	l409
  1512  000A4A  5054               	movf	printf@width+1,w,c
  1513  000A4C  E103               	bnz	u2460
  1514  000A4E  0E03               	movlw	3
  1515  000A50  5C53               	subwf	printf@width,w,c
  1516  000A52  E305               	bnc	l409
  1517  000A54                     u2460:
  1518                           
  1519                           ;doprnt.c: 1373: width -= 2;
  1520  000A54  0EFE               	movlw	254
  1521  000A56  2653               	addwf	printf@width,f,c
  1522  000A58  0EFF               	movlw	255
  1523  000A5A  2254               	addwfc	printf@width+1,f,c
  1524  000A5C  D002               	goto	l2422
  1525  000A5E                     l409:
  1526                           
  1527                           ;doprnt.c: 1374: else
  1528                           ;doprnt.c: 1375: width = 0;
  1529  000A5E  6A53               	clrf	printf@width,c
  1530  000A60  6A54               	clrf	printf@width+1,c
  1531  000A62                     l2422:
  1532                           
  1533                           ;doprnt.c: 1376: }
  1534                           ;doprnt.c: 1381: if(width > c)
  1535  000A62  0E80               	movlw	128
  1536  000A64  BE55               	btfsc	printf@c,7,c
  1537  000A66  0E7F               	movlw	127
  1538  000A68  6E41               	movwf	??_printf& (0+255),c
  1539  000A6A  5053               	movf	printf@width,w,c
  1540  000A6C  5C55               	subwf	printf@c,w,c
  1541  000A6E  5054               	movf	printf@width+1,w,c
  1542  000A70  0A80               	xorlw	128
  1543  000A72  5841               	subwfb	??_printf& (0+255),w,c
  1544  000A74  E207               	bc	l411
  1545                           
  1546                           ;doprnt.c: 1382: width -= c;
  1547  000A76  5055               	movf	printf@c,w,c
  1548  000A78  5E53               	subwf	printf@width,f,c
  1549  000A7A  0E00               	movlw	0
  1550  000A7C  BE55               	btfsc	printf@c,7,c
  1551  000A7E  0EFF               	movlw	255
  1552  000A80  5A54               	subwfb	printf@width+1,f,c
  1553  000A82  D002               	goto	l412
  1554  000A84                     l411:
  1555                           
  1556                           ;doprnt.c: 1383: else
  1557                           ;doprnt.c: 1384: width = 0;
  1558  000A84  6A53               	clrf	printf@width,c
  1559  000A86  6A54               	clrf	printf@width+1,c
  1560  000A88                     l412:
  1561                           
  1562                           ;doprnt.c: 1387: if(flag & 0x04) {
  1563  000A88  A456               	btfss	printf@flag,2,c
  1564  000A8A  D03C               	goto	l2450
  1565                           
  1566                           ;doprnt.c: 1392: if(flag & 0x03)
  1567  000A8C  C056  F041         	movff	printf@flag,??_printf
  1568  000A90  0E03               	movlw	3
  1569  000A92  1641               	andwf	??_printf,f,c
  1570  000A94  E004               	bz	l414
  1571                           
  1572                           ;doprnt.c: 1393: (putch('-') );
  1573  000A96  0E2D               	movlw	45
  1574  000A98  EC59  F008         	call	_putch
  1575  000A9C  D028               	goto	l2444
  1576  000A9E                     l414:
  1577                           
  1578                           ;doprnt.c: 1396: else
  1579                           ;doprnt.c: 1399: if(flag & 0x01)
  1580  000A9E  A056               	btfss	printf@flag,0,c
  1581  000AA0  D004               	goto	l2432
  1582                           
  1583                           ;doprnt.c: 1400: (putch(' ') );
  1584  000AA2  0E20               	movlw	32
  1585  000AA4  EC59  F008         	call	_putch
  1586  000AA8  D022               	goto	l2444
  1587  000AAA                     l2432:
  1588                           
  1589                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  1590  000AAA  0EC0               	movlw	192
  1591  000AAC  6E41               	movwf	??_printf& (0+255),c
  1592  000AAE  0E08               	movlw	8
  1593  000AB0  6E42               	movwf	(??_printf+1)& (0+255),c
  1594  000AB2  C056  F043         	movff	printf@flag,??_printf+2
  1595  000AB6  C057  F044         	movff	printf@flag+1,??_printf+3
  1596  000ABA  5041               	movf	??_printf,w,c
  1597  000ABC  1643               	andwf	??_printf+2,f,c
  1598  000ABE  5042               	movf	??_printf+1,w,c
  1599  000AC0  1644               	andwf	??_printf+3,f,c
  1600  000AC2  0E80               	movlw	128
  1601  000AC4  1843               	xorwf	??_printf+2,w,c
  1602  000AC6  E113               	bnz	l2444
  1603  000AC8  0E08               	movlw	8
  1604  000ACA  1844               	xorwf	??_printf+3,w,c
  1605  000ACC  E110               	bnz	l2444
  1606                           
  1607                           ;doprnt.c: 1404: (putch('0') );
  1608  000ACE  0E30               	movlw	48
  1609  000AD0  EC59  F008         	call	_putch
  1610                           
  1611                           ;doprnt.c: 1406: (putch(flag & 0x20 ? 'X' : 'x') );
  1612  000AD4  BA56               	btfsc	printf@flag,5,c
  1613  000AD6  D004               	goto	l2440
  1614  000AD8  0E00               	movlw	0
  1615  000ADA  6E47               	movwf	_printf$992+1,c
  1616  000ADC  0E78               	movlw	120
  1617  000ADE  D003               	goto	L2
  1618  000AE0                     l2440:
  1619  000AE0  0E00               	movlw	0
  1620  000AE2  6E47               	movwf	_printf$992+1,c
  1621  000AE4  0E58               	movlw	88
  1622  000AE6                     L2:
  1623  000AE6  6E46               	movwf	_printf$992,c
  1624  000AE8  5046               	movf	_printf$992,w,c
  1625  000AEA  EC59  F008         	call	_putch
  1626  000AEE                     l2444:
  1627                           
  1628                           ;doprnt.c: 1412: }
  1629                           ;doprnt.c: 1415: if(width)
  1630  000AEE  5053               	movf	printf@width,w,c
  1631  000AF0  1054               	iorwf	printf@width+1,w,c
  1632  000AF2  E101 D0C9          	bz	l2500
  1633                           
  1634                           ;doprnt.c: 1417: (putch('0') );
  1635  000AF6  0E30               	movlw	48
  1636  000AF8  EC59  F008         	call	_putch
  1637                           
  1638                           ;doprnt.c: 1418: while(--width);
  1639  000AFC  0653               	decf	printf@width,f,c
  1640  000AFE  A0D8               	btfss	status,0,c
  1641  000B00  0654               	decf	printf@width+1,f,c
  1642  000B02  D7F5               	goto	l2444
  1643  000B04                     l2450:
  1644                           
  1645                           ;doprnt.c: 1422: {
  1646                           ;doprnt.c: 1424: if(width
  1647                           ;doprnt.c: 1426: && !(flag & 0x08)
  1648                           ;doprnt.c: 1428: )
  1649  000B04  5053               	movf	printf@width,w,c
  1650  000B06  1054               	iorwf	printf@width+1,w,c
  1651  000B08  E00B               	bz	l2458
  1652  000B0A  B656               	btfsc	printf@flag,3,c
  1653  000B0C  D009               	goto	l2458
  1654  000B0E                     l2454:
  1655                           
  1656                           ;doprnt.c: 1430: (putch(' ') );
  1657  000B0E  0E20               	movlw	32
  1658  000B10  EC59  F008         	call	_putch
  1659                           
  1660                           ;doprnt.c: 1431: while(--width);
  1661  000B14  0653               	decf	printf@width,f,c
  1662  000B16  A0D8               	btfss	status,0,c
  1663  000B18  0654               	decf	printf@width+1,f,c
  1664  000B1A  5053               	movf	printf@width,w,c
  1665  000B1C  1054               	iorwf	printf@width+1,w,c
  1666  000B1E  E1F7               	bnz	l2454
  1667  000B20                     l2458:
  1668                           
  1669                           ;doprnt.c: 1438: if(flag & 0x03)
  1670  000B20  C056  F041         	movff	printf@flag,??_printf
  1671  000B24  0E03               	movlw	3
  1672  000B26  1641               	andwf	??_printf,f,c
  1673  000B28  E004               	bz	l430
  1674                           
  1675                           ;doprnt.c: 1439: (putch('-') );
  1676  000B2A  0E2D               	movlw	45
  1677  000B2C  EC59  F008         	call	_putch
  1678  000B30  D005               	goto	l2464
  1679  000B32                     l430:
  1680                           
  1681                           ;doprnt.c: 1443: else if(flag & 0x01)
  1682  000B32  A056               	btfss	printf@flag,0,c
  1683  000B34  D003               	goto	l2464
  1684                           
  1685                           ;doprnt.c: 1444: (putch(' ') );
  1686  000B36  0E20               	movlw	32
  1687  000B38  EC59  F008         	call	_putch
  1688  000B3C                     l2464:
  1689                           
  1690                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  1691  000B3C  0EC0               	movlw	192
  1692  000B3E  6E41               	movwf	??_printf& (0+255),c
  1693  000B40  0E08               	movlw	8
  1694  000B42  6E42               	movwf	(??_printf+1)& (0+255),c
  1695  000B44  C056  F043         	movff	printf@flag,??_printf+2
  1696  000B48  C057  F044         	movff	printf@flag+1,??_printf+3
  1697  000B4C  5041               	movf	??_printf,w,c
  1698  000B4E  1643               	andwf	??_printf+2,f,c
  1699  000B50  5042               	movf	??_printf+1,w,c
  1700  000B52  1644               	andwf	??_printf+3,f,c
  1701  000B54  0E40               	movlw	64
  1702  000B56  1843               	xorwf	??_printf+2,w,c
  1703  000B58  E107               	bnz	l2468
  1704  000B5A  0E08               	movlw	8
  1705  000B5C  1844               	xorwf	??_printf+3,w,c
  1706  000B5E  E104               	bnz	l2468
  1707                           
  1708                           ;doprnt.c: 1449: (putch('0') );
  1709  000B60  0E30               	movlw	48
  1710  000B62  EC59  F008         	call	_putch
  1711  000B66  D090               	goto	l2500
  1712  000B68                     l2468:
  1713                           
  1714                           ;doprnt.c: 1450: else
  1715                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  1716  000B68  0EC0               	movlw	192
  1717  000B6A  6E41               	movwf	??_printf& (0+255),c
  1718  000B6C  0E08               	movlw	8
  1719  000B6E  6E42               	movwf	(??_printf+1)& (0+255),c
  1720  000B70  C056  F043         	movff	printf@flag,??_printf+2
  1721  000B74  C057  F044         	movff	printf@flag+1,??_printf+3
  1722  000B78  5041               	movf	??_printf,w,c
  1723  000B7A  1643               	andwf	??_printf+2,f,c
  1724  000B7C  5042               	movf	??_printf+1,w,c
  1725  000B7E  1644               	andwf	??_printf+3,f,c
  1726  000B80  0E80               	movlw	128
  1727  000B82  1843               	xorwf	??_printf+2,w,c
  1728  000B84  E113               	bnz	l426
  1729  000B86  0E08               	movlw	8
  1730  000B88  1844               	xorwf	??_printf+3,w,c
  1731  000B8A  E17E               	bnz	l2500
  1732                           
  1733                           ;doprnt.c: 1458: (putch('0') );
  1734  000B8C  0E30               	movlw	48
  1735  000B8E  EC59  F008         	call	_putch
  1736                           
  1737                           ;doprnt.c: 1460: (putch(flag & 0x20 ? 'X' : 'x') );
  1738  000B92  BA56               	btfsc	printf@flag,5,c
  1739  000B94  D004               	goto	l2476
  1740  000B96  0E00               	movlw	0
  1741  000B98  6E49               	movwf	_printf$993+1,c
  1742  000B9A  0E78               	movlw	120
  1743  000B9C  D003               	goto	L3
  1744  000B9E                     l2476:
  1745  000B9E  0E00               	movlw	0
  1746  000BA0  6E49               	movwf	_printf$993+1,c
  1747  000BA2  0E58               	movlw	88
  1748  000BA4                     L3:
  1749  000BA4  6E48               	movwf	_printf$993,c
  1750  000BA6  5048               	movf	_printf$993,w,c
  1751  000BA8  EC59  F008         	call	_putch
  1752  000BAC                     l426:
  1753                           
  1754                           ;doprnt.c: 1466: }
  1755                           ;doprnt.c: 1469: }
  1756                           ;doprnt.c: 1474: while(prec--) {
  1757  000BAC  D06D               	goto	l2500
  1758  000BAE                     l2480:
  1759                           
  1760                           ;doprnt.c: 1486: case 0xC0:
  1761                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1762  000BAE  5052               	movf	printf@prec,w,c
  1763  000BB0  0D02               	mullw	2
  1764  000BB2  50F3               	movf	prodl,w,c
  1765  000BB4  0F0D               	addlw	low _dpowers
  1766  000BB6  6E41               	movwf	??_printf& (0+255),c
  1767  000BB8  C041  FFF6         	movff	??_printf,tblptrl
  1768  000BBC                     	if	1	;There is more than 1 active tblptr byte
  1769  000BBC  0E06               	movlw	high __smallconst
  1770  000BBE  6EF7               	movwf	tblptrh,c
  1771  000BC0                     	endif
  1772  000BC0                     	if	0	;tblptru may be non-zero
  1773  000BC0                     	endif
  1774  000BC0                     	if	0	;tblptru may be non-zero
  1775  000BC0                     	endif
  1776  000BC0  0009               	tblrd		*+
  1777  000BC2  CFF5 F035          	movff	tablat,___lwdiv@divisor
  1778  000BC6  000A               	tblrd		*-
  1779  000BC8  CFF5 F036          	movff	tablat,___lwdiv@divisor+1
  1780  000BCC  C04F  F033         	movff	printf@val,___lwdiv@dividend
  1781  000BD0  C050  F034         	movff	printf@val+1,___lwdiv@dividend+1
  1782  000BD4  ECFC  F006         	call	___lwdiv	;wreg free
  1783  000BD8  C033  F03A         	movff	?___lwdiv,___lwmod@dividend
  1784  000BDC  C034  F03B         	movff	?___lwdiv+1,___lwmod@dividend+1
  1785  000BE0  6A3D               	clrf	___lwmod@divisor+1,c
  1786  000BE2  0E0A               	movlw	10
  1787  000BE4  6E3C               	movwf	___lwmod@divisor,c
  1788  000BE6  EC21  F007         	call	___lwmod	;wreg free
  1789  000BEA  503A               	movf	?___lwmod,w,c
  1790  000BEC  D03E               	goto	L4
  1791  000BEE                     l2482:
  1792                           
  1793                           ;doprnt.c: 1499: {
  1794                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1795  000BEE  C04F  F033         	movff	printf@val,___lwdiv@dividend
  1796  000BF2  C050  F034         	movff	printf@val+1,___lwdiv@dividend+1
  1797  000BF6  5052               	movf	printf@prec,w,c
  1798  000BF8  0D02               	mullw	2
  1799  000BFA  50F3               	movf	prodl,w,c
  1800  000BFC  0F17               	addlw	low _hexpowers
  1801  000BFE  6E41               	movwf	??_printf& (0+255),c
  1802  000C00  C041  FFF6         	movff	??_printf,tblptrl
  1803  000C04                     	if	1	;There is more than 1 active tblptr byte
  1804  000C04  0E06               	movlw	high __smallconst
  1805  000C06  6EF7               	movwf	tblptrh,c
  1806  000C08                     	endif
  1807  000C08                     	if	0	;tblptru may be non-zero
  1808  000C08                     	endif
  1809  000C08                     	if	0	;tblptru may be non-zero
  1810  000C08                     	endif
  1811  000C08  0009               	tblrd		*+
  1812  000C0A  CFF5 F035          	movff	tablat,___lwdiv@divisor
  1813  000C0E  000A               	tblrd		*-
  1814  000C10  CFF5 F036          	movff	tablat,___lwdiv@divisor+1
  1815  000C14  ECFC  F006         	call	___lwdiv	;wreg free
  1816  000C18  5033               	movf	?___lwdiv,w,c
  1817  000C1A  0B0F               	andlw	15
  1818  000C1C  6E45               	movwf	printf@idx,c
  1819  000C1E  0E30               	movlw	low STR_4
  1820                           
  1821                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  1822  000C20  BA56               	btfsc	printf@flag,5,c
  1823  000C22  0E1F               	movlw	low STR_3
  1824  000C24  6E4B               	movwf	_printf$999,c
  1825  000C26  504B               	movf	_printf$999,w,c
  1826  000C28  2445               	addwf	printf@idx,w,c
  1827  000C2A  6E41               	movwf	??_printf& (0+255),c
  1828  000C2C  C041  FFF6         	movff	??_printf,tblptrl
  1829  000C30                     	if	1	;There is more than 1 active tblptr byte
  1830  000C30  0E06               	movlw	high __smallconst
  1831  000C32  6EF7               	movwf	tblptrh,c
  1832  000C34                     	endif
  1833  000C34                     	if	0	;tblptru may be non-zero
  1834  000C34                     	endif
  1835  000C34                     	if	0	;tblptru may be non-zero
  1836  000C34                     	endif
  1837  000C34  0008               	tblrd		*
  1838  000C36  CFF5 F055          	movff	tablat,printf@c
  1839                           
  1840                           ;doprnt.c: 1508: }
  1841                           ;doprnt.c: 1510: break;
  1842  000C3A  D023               	goto	l2498
  1843  000C3C                     l2492:
  1844                           
  1845                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  1846  000C3C  C04F  F033         	movff	printf@val,___lwdiv@dividend
  1847  000C40  C050  F034         	movff	printf@val+1,___lwdiv@dividend+1
  1848  000C44  5052               	movf	printf@prec,w,c
  1849  000C46  0D02               	mullw	2
  1850  000C48  50F3               	movf	prodl,w,c
  1851  000C4A  0F01               	addlw	low _octpowers
  1852  000C4C  6E41               	movwf	??_printf& (0+255),c
  1853  000C4E  C041  FFF6         	movff	??_printf,tblptrl
  1854  000C52                     	if	1	;There is more than 1 active tblptr byte
  1855  000C52  0E06               	movlw	high __smallconst
  1856  000C54  6EF7               	movwf	tblptrh,c
  1857  000C56                     	endif
  1858  000C56                     	if	0	;tblptru may be non-zero
  1859  000C56                     	endif
  1860  000C56                     	if	0	;tblptru may be non-zero
  1861  000C56                     	endif
  1862  000C56  0009               	tblrd		*+
  1863  000C58  CFF5 F035          	movff	tablat,___lwdiv@divisor
  1864  000C5C  000A               	tblrd		*-
  1865  000C5E  CFF5 F036          	movff	tablat,___lwdiv@divisor+1
  1866  000C62  ECFC  F006         	call	___lwdiv	;wreg free
  1867  000C66  5033               	movf	?___lwdiv,w,c
  1868  000C68  0B07               	andlw	7
  1869  000C6A                     L4:
  1870  000C6A  0F30               	addlw	48
  1871  000C6C  6E55               	movwf	printf@c,c
  1872                           
  1873                           ;doprnt.c: 1520: break;
  1874  000C6E  D009               	goto	l2498
  1875  000C70                     l2496:
  1876  000C70  5056               	movf	printf@flag,w,c
  1877  000C72  0BC0               	andlw	192
  1878                           
  1879                           ; Switch size 1, requested type "speed"
  1880                           ; Number of cases is 4, Range of values is 0 to 192
  1881                           ; switch strategies available:
  1882                           ; Name         Instructions Cycles
  1883                           ; simple_byte           13     7 (average)
  1884                           ;	Chosen strategy is simple_byte
  1885  000C74  E09C               	bz	l2480
  1886  000C76  0A40               	xorlw	64	; case 64
  1887  000C78  E0E1               	bz	l2492
  1888  000C7A  0AC0               	xorlw	192	; case 128
  1889  000C7C  E0B8               	bz	l2482
  1890  000C7E  0A40               	xorlw	64	; case 192
  1891  000C80  E096               	bz	l2480
  1892  000C82                     l2498:
  1893                           
  1894                           ;doprnt.c: 1524: (putch(c) );
  1895  000C82  5055               	movf	printf@c,w,c
  1896  000C84  EC59  F008         	call	_putch
  1897  000C88                     l2500:
  1898  000C88  0652               	decf	printf@prec,f,c
  1899  000C8A  2852               	incf	printf@prec,w,c
  1900  000C8C  E1F1               	bnz	l2496
  1901                           
  1902                           ;doprnt.c: 1525: }
  1903                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  1904  000C8E  B656               	btfsc	printf@flag,3,c
  1905  000C90  BE54               	btfsc	printf@width+1,7,c
  1906  000C92  D00D               	goto	l2508
  1907  000C94  5054               	movf	printf@width+1,w,c
  1908  000C96  E102               	bnz	u2660
  1909  000C98  0453               	decf	printf@width,w,c
  1910  000C9A  E309               	bnc	l2508
  1911  000C9C                     u2660:
  1912  000C9C                     l2504:
  1913                           
  1914                           ;doprnt.c: 1530: (putch(' ') );
  1915  000C9C  0E20               	movlw	32
  1916  000C9E  EC59  F008         	call	_putch
  1917                           
  1918                           ;doprnt.c: 1531: while(--width);
  1919  000CA2  0653               	decf	printf@width,f,c
  1920  000CA4  A0D8               	btfss	status,0,c
  1921  000CA6  0654               	decf	printf@width+1,f,c
  1922  000CA8  5053               	movf	printf@width,w,c
  1923  000CAA  1054               	iorwf	printf@width+1,w,c
  1924  000CAC  E1F7               	bnz	l2504
  1925  000CAE                     l2508:
  1926  000CAE  2A51               	incf	printf@f,f,c
  1927  000CB0  0451               	decf	printf@f,w,c
  1928  000CB2  6E41               	movwf	??_printf& (0+255),c
  1929  000CB4  C041  FFF6         	movff	??_printf,tblptrl
  1930  000CB8                     	if	1	;There is more than 1 active tblptr byte
  1931  000CB8  0E06               	movlw	high __smallconst
  1932  000CBA  6EF7               	movwf	tblptrh,c
  1933  000CBC                     	endif
  1934  000CBC                     	if	0	;tblptru may be non-zero
  1935  000CBC                     	endif
  1936  000CBC                     	if	0	;tblptru may be non-zero
  1937  000CBC                     	endif
  1938  000CBC  0008               	tblrd		*
  1939  000CBE  CFF5 F055          	movff	tablat,printf@c
  1940  000CC2  5055               	movf	printf@c,w,c
  1941  000CC4  E001 D4CF          	bnz	l2220
  1942  000CC8  0012               	return		;funcret
  1943  000CCA                     __end_of_printf:
  1944                           	opt stack 0
  1945                           tblptru	equ	0xFF8
  1946                           tblptrh	equ	0xFF7
  1947                           tblptrl	equ	0xFF6
  1948                           tablat	equ	0xFF5
  1949                           prodl	equ	0xFF3
  1950                           intcon	equ	0xFF2
  1951                           postinc0	equ	0xFEE
  1952                           wreg	equ	0xFE8
  1953                           indf2	equ	0xFDF
  1954                           postinc2	equ	0xFDE
  1955                           postdec2	equ	0xFDD
  1956                           fsr2h	equ	0xFDA
  1957                           fsr2l	equ	0xFD9
  1958                           status	equ	0xFD8
  1959                           
  1960 ;; *************** function _putch *****************
  1961 ;; Defined at:
  1962 ;;		line 152 in file "mcc_generated_files/eusart1.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;  txData          1    wreg     unsigned char 
  1965 ;; Auto vars:     Size  Location     Type
  1966 ;;  txData          1    3[COMRAM] unsigned char 
  1967 ;; Return value:  Size  Location     Type
  1968 ;;		None               void
  1969 ;; Registers used:
  1970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/F
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1976 ;;      Params:         0       0       0       0       0       0       0
  1977 ;;      Locals:         1       0       0       0       0       0       0
  1978 ;;      Temps:          0       0       0       0       0       0       0
  1979 ;;      Totals:         1       0       0       0       0       0       0
  1980 ;;Total ram usage:        1 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:    4
  1983 ;; This function calls:
  1984 ;;		_EUSART1_Write
  1985 ;; This function is called by:
  1986 ;;		_printf
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           	psect	text3
  1991  0010B2                     __ptext3:
  1992                           	opt stack 0
  1993  0010B2                     _putch:
  1994                           	opt stack 24
  1995                           
  1996                           ;incstack = 0
  1997                           ;putch@txData stored from wreg
  1998  0010B2  6E34               	movwf	putch@txData,c
  1999                           
  2000                           ;eusart1.c: 153: EUSART1_Write(txData);
  2001  0010B4  5034               	movf	putch@txData,w,c
  2002  0010B6  EF72  F007         	goto	_EUSART1_Write
  2003  0010BA                     __end_of_putch:
  2004                           	opt stack 0
  2005                           tblptru	equ	0xFF8
  2006                           tblptrh	equ	0xFF7
  2007                           tblptrl	equ	0xFF6
  2008                           tablat	equ	0xFF5
  2009                           prodl	equ	0xFF3
  2010                           intcon	equ	0xFF2
  2011                           postinc0	equ	0xFEE
  2012                           wreg	equ	0xFE8
  2013                           indf2	equ	0xFDF
  2014                           postinc2	equ	0xFDE
  2015                           postdec2	equ	0xFDD
  2016                           fsr2h	equ	0xFDA
  2017                           fsr2l	equ	0xFD9
  2018                           status	equ	0xFD8
  2019                           
  2020 ;; *************** function _EUSART1_Write *****************
  2021 ;; Defined at:
  2022 ;;		line 131 in file "mcc_generated_files/eusart1.c"
  2023 ;; Parameters:    Size  Location     Type
  2024 ;;  txData          1    wreg     unsigned char 
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;  txData          1    2[COMRAM] unsigned char 
  2027 ;; Return value:  Size  Location     Type
  2028 ;;		None               void
  2029 ;; Registers used:
  2030 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/F
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2036 ;;      Params:         0       0       0       0       0       0       0
  2037 ;;      Locals:         1       0       0       0       0       0       0
  2038 ;;      Temps:          0       0       0       0       0       0       0
  2039 ;;      Totals:         1       0       0       0       0       0       0
  2040 ;;Total ram usage:        1 bytes
  2041 ;; Hardware stack levels used:    1
  2042 ;; Hardware stack levels required when called:    3
  2043 ;; This function calls:
  2044 ;;		Nothing
  2045 ;; This function is called by:
  2046 ;;		_putch
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text4
  2051  000EE4                     __ptext4:
  2052                           	opt stack 0
  2053  000EE4                     _EUSART1_Write:
  2054                           	opt stack 24
  2055                           
  2056                           ;incstack = 0
  2057                           ;EUSART1_Write@txData stored from wreg
  2058  000EE4  6E33               	movwf	EUSART1_Write@txData,c
  2059  000EE6                     l2102:
  2060  000EE6  505A               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  2061  000EE8  E0FE               	bz	l2102
  2062                           
  2063                           ;eusart1.c: 133: }
  2064                           ;eusart1.c: 135: if (0 == PIE1bits.TX1IE) {
  2065  000EEA  B89D               	btfsc	3997,4,c	;volatile
  2066  000EEC  D003               	goto	l111
  2067                           
  2068                           ;eusart1.c: 136: TXREG1 = txData;
  2069  000EEE  C033  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  2070                           
  2071                           ;eusart1.c: 137: } else {
  2072  000EF2  D00D               	goto	l2116
  2073  000EF4                     l111:
  2074                           
  2075                           ;eusart1.c: 138: PIE1bits.TX1IE = 0;
  2076  000EF4  989D               	bcf	3997,4,c	;volatile
  2077                           
  2078                           ;eusart1.c: 139: eusart1TxBuffer[eusart1TxHead++] = txData;
  2079  000EF6  501A               	movf	_eusart1TxHead,w,c
  2080  000EF8  0F09               	addlw	low _eusart1TxBuffer
  2081  000EFA  6ED9               	movwf	fsr2l,c
  2082  000EFC  6ADA               	clrf	fsr2h,c
  2083  000EFE  C033  FFDF         	movff	EUSART1_Write@txData,indf2
  2084  000F02  2A1A               	incf	_eusart1TxHead,f,c
  2085                           
  2086                           ;eusart1.c: 140: if (sizeof (eusart1TxBuffer) <= eusart1TxHead) {
  2087  000F04  0E07               	movlw	7
  2088  000F06  641A               	cpfsgt	_eusart1TxHead,c
  2089  000F08  D001               	goto	l2114
  2090                           
  2091                           ;eusart1.c: 141: eusart1TxHead = 0;
  2092  000F0A  6A1A               	clrf	_eusart1TxHead,c
  2093  000F0C                     l2114:
  2094                           
  2095                           ;eusart1.c: 142: }
  2096                           ;eusart1.c: 143: eusart1TxBufferRemaining--;
  2097  000F0C  065A               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  2098  000F0E                     l2116:
  2099                           
  2100                           ;eusart1.c: 144: }
  2101                           ;eusart1.c: 145: PIE1bits.TX1IE = 1;
  2102  000F0E  889D               	bsf	3997,4,c	;volatile
  2103  000F10  0012               	return		;funcret
  2104  000F12                     __end_of_EUSART1_Write:
  2105                           	opt stack 0
  2106                           tblptru	equ	0xFF8
  2107                           tblptrh	equ	0xFF7
  2108                           tblptrl	equ	0xFF6
  2109                           tablat	equ	0xFF5
  2110                           prodl	equ	0xFF3
  2111                           intcon	equ	0xFF2
  2112                           postinc0	equ	0xFEE
  2113                           wreg	equ	0xFE8
  2114                           indf2	equ	0xFDF
  2115                           postinc2	equ	0xFDE
  2116                           postdec2	equ	0xFDD
  2117                           fsr2h	equ	0xFDA
  2118                           fsr2l	equ	0xFD9
  2119                           status	equ	0xFD8
  2120                           
  2121 ;; *************** function _isdigit *****************
  2122 ;; Defined at:
  2123 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\isdigit.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;  c               1    wreg     unsigned char 
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;  c               1    4[COMRAM] unsigned char 
  2128 ;; Return value:  Size  Location     Type
  2129 ;;		None               void
  2130 ;; Registers used:
  2131 ;;		wreg, status,2, status,0
  2132 ;; Tracked objects:
  2133 ;;		On entry : 0/F
  2134 ;;		On exit  : 0/0
  2135 ;;		Unchanged: 0/0
  2136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2137 ;;      Params:         0       0       0       0       0       0       0
  2138 ;;      Locals:         2       0       0       0       0       0       0
  2139 ;;      Temps:          1       0       0       0       0       0       0
  2140 ;;      Totals:         3       0       0       0       0       0       0
  2141 ;;Total ram usage:        3 bytes
  2142 ;; Hardware stack levels used:    1
  2143 ;; Hardware stack levels required when called:    3
  2144 ;; This function calls:
  2145 ;;		Nothing
  2146 ;; This function is called by:
  2147 ;;		_printf
  2148 ;; This function uses a non-reentrant model
  2149 ;;
  2150                           
  2151                           	psect	text5
  2152  001012                     __ptext5:
  2153                           	opt stack 0
  2154  001012                     _isdigit:
  2155                           	opt stack 25
  2156                           
  2157                           ;incstack = 0
  2158                           ;isdigit@c stored from wreg
  2159  001012  6E35               	movwf	isdigit@c,c
  2160  001014  6A34               	clrf	_isdigit$1223,c
  2161  001016  0E3A               	movlw	58
  2162  001018  6035               	cpfslt	isdigit@c,c
  2163  00101A  D005               	goto	l2150
  2164  00101C  0E2F               	movlw	47
  2165  00101E  6435               	cpfsgt	isdigit@c,c
  2166  001020  D002               	goto	l2150
  2167  001022  0E01               	movlw	1
  2168  001024  6E34               	movwf	_isdigit$1223,c
  2169  001026                     l2150:
  2170  001026  C034  F033         	movff	_isdigit$1223,??_isdigit
  2171  00102A  3033               	rrcf	??_isdigit,w,c
  2172  00102C  0012               	return		;funcret
  2173  00102E                     __end_of_isdigit:
  2174                           	opt stack 0
  2175                           tblptru	equ	0xFF8
  2176                           tblptrh	equ	0xFF7
  2177                           tblptrl	equ	0xFF6
  2178                           tablat	equ	0xFF5
  2179                           prodl	equ	0xFF3
  2180                           intcon	equ	0xFF2
  2181                           postinc0	equ	0xFEE
  2182                           wreg	equ	0xFE8
  2183                           indf2	equ	0xFDF
  2184                           postinc2	equ	0xFDE
  2185                           postdec2	equ	0xFDD
  2186                           fsr2h	equ	0xFDA
  2187                           fsr2l	equ	0xFD9
  2188                           status	equ	0xFD8
  2189                           
  2190 ;; *************** function ___wmul *****************
  2191 ;; Defined at:
  2192 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\Umul16.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;  multiplier      2    2[COMRAM] unsigned int 
  2195 ;;  multiplicand    2    4[COMRAM] unsigned int 
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;  product         2    6[COMRAM] unsigned int 
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  2    2[COMRAM] unsigned int 
  2200 ;; Registers used:
  2201 ;;		wreg, status,2, status,0, prodl, prodh
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/F
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2207 ;;      Params:         4       0       0       0       0       0       0
  2208 ;;      Locals:         2       0       0       0       0       0       0
  2209 ;;      Temps:          0       0       0       0       0       0       0
  2210 ;;      Totals:         6       0       0       0       0       0       0
  2211 ;;Total ram usage:        6 bytes
  2212 ;; Hardware stack levels used:    1
  2213 ;; Hardware stack levels required when called:    3
  2214 ;; This function calls:
  2215 ;;		Nothing
  2216 ;; This function is called by:
  2217 ;;		_printf
  2218 ;; This function uses a non-reentrant model
  2219 ;;
  2220                           
  2221                           	psect	text6
  2222  000F3A                     __ptext6:
  2223                           	opt stack 0
  2224  000F3A                     ___wmul:
  2225                           	opt stack 25
  2226                           
  2227                           ;incstack = 0
  2228  000F3A  5033               	movf	___wmul@multiplier,w,c
  2229  000F3C  0235               	mulwf	___wmul@multiplicand,c
  2230  000F3E  CFF3 F037          	movff	prodl,___wmul@product
  2231  000F42  CFF4 F038          	movff	prodh,___wmul@product+1
  2232  000F46  5033               	movf	___wmul@multiplier,w,c
  2233  000F48  0236               	mulwf	___wmul@multiplicand+1,c
  2234  000F4A  50F3               	movf	prodl,w,c
  2235  000F4C  2638               	addwf	___wmul@product+1,f,c
  2236  000F4E  5034               	movf	___wmul@multiplier+1,w,c
  2237  000F50  0235               	mulwf	___wmul@multiplicand,c
  2238  000F52  50F3               	movf	prodl,w,c
  2239  000F54  2638               	addwf	___wmul@product+1,f,c
  2240  000F56  C037  F033         	movff	___wmul@product,?___wmul
  2241  000F5A  C038  F034         	movff	___wmul@product+1,?___wmul+1
  2242  000F5E  0012               	return		;funcret
  2243  000F60                     __end_of___wmul:
  2244                           	opt stack 0
  2245                           tblptru	equ	0xFF8
  2246                           tblptrh	equ	0xFF7
  2247                           tblptrl	equ	0xFF6
  2248                           tablat	equ	0xFF5
  2249                           prodh	equ	0xFF4
  2250                           prodl	equ	0xFF3
  2251                           intcon	equ	0xFF2
  2252                           postinc0	equ	0xFEE
  2253                           wreg	equ	0xFE8
  2254                           indf2	equ	0xFDF
  2255                           postinc2	equ	0xFDE
  2256                           postdec2	equ	0xFDD
  2257                           fsr2h	equ	0xFDA
  2258                           fsr2l	equ	0xFD9
  2259                           status	equ	0xFD8
  2260                           
  2261 ;; *************** function ___lwmod *****************
  2262 ;; Defined at:
  2263 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lwmod.c"
  2264 ;; Parameters:    Size  Location     Type
  2265 ;;  dividend        2    9[COMRAM] unsigned int 
  2266 ;;  divisor         2   11[COMRAM] unsigned int 
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;  counter         1   13[COMRAM] unsigned char 
  2269 ;; Return value:  Size  Location     Type
  2270 ;;                  2    9[COMRAM] unsigned int 
  2271 ;; Registers used:
  2272 ;;		wreg, status,2, status,0
  2273 ;; Tracked objects:
  2274 ;;		On entry : 0/F
  2275 ;;		On exit  : 0/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2278 ;;      Params:         4       0       0       0       0       0       0
  2279 ;;      Locals:         1       0       0       0       0       0       0
  2280 ;;      Temps:          0       0       0       0       0       0       0
  2281 ;;      Totals:         5       0       0       0       0       0       0
  2282 ;;Total ram usage:        5 bytes
  2283 ;; Hardware stack levels used:    1
  2284 ;; Hardware stack levels required when called:    3
  2285 ;; This function calls:
  2286 ;;		Nothing
  2287 ;; This function is called by:
  2288 ;;		_printf
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           	psect	text7
  2293  000E42                     __ptext7:
  2294                           	opt stack 0
  2295  000E42                     ___lwmod:
  2296                           	opt stack 25
  2297                           
  2298                           ;incstack = 0
  2299  000E42  503C               	movf	___lwmod@divisor,w,c
  2300  000E44  103D               	iorwf	___lwmod@divisor+1,w,c
  2301  000E46  E017               	bz	l869
  2302  000E48  0E01               	movlw	1
  2303  000E4A  6E3E               	movwf	___lwmod@counter,c
  2304  000E4C  D004               	goto	l2188
  2305  000E4E                     l2186:
  2306  000E4E  90D8               	bcf	status,0,c
  2307  000E50  363C               	rlcf	___lwmod@divisor,f,c
  2308  000E52  363D               	rlcf	___lwmod@divisor+1,f,c
  2309  000E54  2A3E               	incf	___lwmod@counter,f,c
  2310  000E56                     l2188:
  2311  000E56  AE3D               	btfss	___lwmod@divisor+1,7,c
  2312  000E58  D7FA               	goto	l2186
  2313  000E5A                     l2190:
  2314  000E5A  503C               	movf	___lwmod@divisor,w,c
  2315  000E5C  5C3A               	subwf	___lwmod@dividend,w,c
  2316  000E5E  503D               	movf	___lwmod@divisor+1,w,c
  2317  000E60  583B               	subwfb	___lwmod@dividend+1,w,c
  2318  000E62  E304               	bnc	l2194
  2319  000E64  503C               	movf	___lwmod@divisor,w,c
  2320  000E66  5E3A               	subwf	___lwmod@dividend,f,c
  2321  000E68  503D               	movf	___lwmod@divisor+1,w,c
  2322  000E6A  5A3B               	subwfb	___lwmod@dividend+1,f,c
  2323  000E6C                     l2194:
  2324  000E6C  90D8               	bcf	status,0,c
  2325  000E6E  323D               	rrcf	___lwmod@divisor+1,f,c
  2326  000E70  323C               	rrcf	___lwmod@divisor,f,c
  2327  000E72  2E3E               	decfsz	___lwmod@counter,f,c
  2328  000E74  D7F2               	goto	l2190
  2329  000E76                     l869:
  2330  000E76  C03A  F03A         	movff	___lwmod@dividend,?___lwmod
  2331  000E7A  C03B  F03B         	movff	___lwmod@dividend+1,?___lwmod+1
  2332  000E7E  0012               	return		;funcret
  2333  000E80                     __end_of___lwmod:
  2334                           	opt stack 0
  2335                           tblptru	equ	0xFF8
  2336                           tblptrh	equ	0xFF7
  2337                           tblptrl	equ	0xFF6
  2338                           tablat	equ	0xFF5
  2339                           prodh	equ	0xFF4
  2340                           prodl	equ	0xFF3
  2341                           intcon	equ	0xFF2
  2342                           postinc0	equ	0xFEE
  2343                           wreg	equ	0xFE8
  2344                           indf2	equ	0xFDF
  2345                           postinc2	equ	0xFDE
  2346                           postdec2	equ	0xFDD
  2347                           fsr2h	equ	0xFDA
  2348                           fsr2l	equ	0xFD9
  2349                           status	equ	0xFD8
  2350                           
  2351 ;; *************** function ___lwdiv *****************
  2352 ;; Defined at:
  2353 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.35\sources\common\lwdiv.c"
  2354 ;; Parameters:    Size  Location     Type
  2355 ;;  dividend        2    2[COMRAM] unsigned int 
  2356 ;;  divisor         2    4[COMRAM] unsigned int 
  2357 ;; Auto vars:     Size  Location     Type
  2358 ;;  quotient        2    7[COMRAM] unsigned int 
  2359 ;;  counter         1    6[COMRAM] unsigned char 
  2360 ;; Return value:  Size  Location     Type
  2361 ;;                  2    2[COMRAM] unsigned int 
  2362 ;; Registers used:
  2363 ;;		wreg, status,2, status,0
  2364 ;; Tracked objects:
  2365 ;;		On entry : 0/F
  2366 ;;		On exit  : 0/0
  2367 ;;		Unchanged: 0/0
  2368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2369 ;;      Params:         4       0       0       0       0       0       0
  2370 ;;      Locals:         3       0       0       0       0       0       0
  2371 ;;      Temps:          0       0       0       0       0       0       0
  2372 ;;      Totals:         7       0       0       0       0       0       0
  2373 ;;Total ram usage:        7 bytes
  2374 ;; Hardware stack levels used:    1
  2375 ;; Hardware stack levels required when called:    3
  2376 ;; This function calls:
  2377 ;;		Nothing
  2378 ;; This function is called by:
  2379 ;;		_printf
  2380 ;; This function uses a non-reentrant model
  2381 ;;
  2382                           
  2383                           	psect	text8
  2384  000DF8                     __ptext8:
  2385                           	opt stack 0
  2386  000DF8                     ___lwdiv:
  2387                           	opt stack 25
  2388                           
  2389                           ;incstack = 0
  2390  000DF8  6A38               	clrf	___lwdiv@quotient,c
  2391  000DFA  6A39               	clrf	___lwdiv@quotient+1,c
  2392  000DFC  5035               	movf	___lwdiv@divisor,w,c
  2393  000DFE  1036               	iorwf	___lwdiv@divisor+1,w,c
  2394  000E00  E01B               	bz	l859
  2395  000E02  0E01               	movlw	1
  2396  000E04  6E37               	movwf	___lwdiv@counter,c
  2397  000E06  D004               	goto	l2168
  2398  000E08                     l2166:
  2399  000E08  90D8               	bcf	status,0,c
  2400  000E0A  3635               	rlcf	___lwdiv@divisor,f,c
  2401  000E0C  3636               	rlcf	___lwdiv@divisor+1,f,c
  2402  000E0E  2A37               	incf	___lwdiv@counter,f,c
  2403  000E10                     l2168:
  2404  000E10  AE36               	btfss	___lwdiv@divisor+1,7,c
  2405  000E12  D7FA               	goto	l2166
  2406  000E14                     l2170:
  2407  000E14  90D8               	bcf	status,0,c
  2408  000E16  3638               	rlcf	___lwdiv@quotient,f,c
  2409  000E18  3639               	rlcf	___lwdiv@quotient+1,f,c
  2410  000E1A  5035               	movf	___lwdiv@divisor,w,c
  2411  000E1C  5C33               	subwf	___lwdiv@dividend,w,c
  2412  000E1E  5036               	movf	___lwdiv@divisor+1,w,c
  2413  000E20  5834               	subwfb	___lwdiv@dividend+1,w,c
  2414  000E22  E305               	bnc	l2178
  2415  000E24  5035               	movf	___lwdiv@divisor,w,c
  2416  000E26  5E33               	subwf	___lwdiv@dividend,f,c
  2417  000E28  5036               	movf	___lwdiv@divisor+1,w,c
  2418  000E2A  5A34               	subwfb	___lwdiv@dividend+1,f,c
  2419  000E2C  8038               	bsf	___lwdiv@quotient,0,c
  2420  000E2E                     l2178:
  2421  000E2E  90D8               	bcf	status,0,c
  2422  000E30  3236               	rrcf	___lwdiv@divisor+1,f,c
  2423  000E32  3235               	rrcf	___lwdiv@divisor,f,c
  2424  000E34  2E37               	decfsz	___lwdiv@counter,f,c
  2425  000E36  D7EE               	goto	l2170
  2426  000E38                     l859:
  2427  000E38  C038  F033         	movff	___lwdiv@quotient,?___lwdiv
  2428  000E3C  C039  F034         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2429  000E40  0012               	return		;funcret
  2430  000E42                     __end_of___lwdiv:
  2431                           	opt stack 0
  2432                           tblptru	equ	0xFF8
  2433                           tblptrh	equ	0xFF7
  2434                           tblptrl	equ	0xFF6
  2435                           tablat	equ	0xFF5
  2436                           prodh	equ	0xFF4
  2437                           prodl	equ	0xFF3
  2438                           intcon	equ	0xFF2
  2439                           postinc0	equ	0xFEE
  2440                           wreg	equ	0xFE8
  2441                           indf2	equ	0xFDF
  2442                           postinc2	equ	0xFDE
  2443                           postdec2	equ	0xFDD
  2444                           fsr2h	equ	0xFDA
  2445                           fsr2l	equ	0xFD9
  2446                           status	equ	0xFD8
  2447                           
  2448 ;; *************** function _delayMs *****************
  2449 ;; Defined at:
  2450 ;;		line 3 in file "delay.c"
  2451 ;; Parameters:    Size  Location     Type
  2452 ;;  time            2    2[COMRAM] unsigned int 
  2453 ;; Auto vars:     Size  Location     Type
  2454 ;;  i               2    5[COMRAM] unsigned int 
  2455 ;; Return value:  Size  Location     Type
  2456 ;;		None               void
  2457 ;; Registers used:
  2458 ;;		wreg, status,2, status,0
  2459 ;; Tracked objects:
  2460 ;;		On entry : 0/F
  2461 ;;		On exit  : 0/0
  2462 ;;		Unchanged: 0/0
  2463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2464 ;;      Params:         2       0       0       0       0       0       0
  2465 ;;      Locals:         2       0       0       0       0       0       0
  2466 ;;      Temps:          1       0       0       0       0       0       0
  2467 ;;      Totals:         5       0       0       0       0       0       0
  2468 ;;Total ram usage:        5 bytes
  2469 ;; Hardware stack levels used:    1
  2470 ;; Hardware stack levels required when called:    3
  2471 ;; This function calls:
  2472 ;;		Nothing
  2473 ;; This function is called by:
  2474 ;;		_app
  2475 ;; This function uses a non-reentrant model
  2476 ;;
  2477                           
  2478                           	psect	text9
  2479  000F60                     __ptext9:
  2480                           	opt stack 0
  2481  000F60                     _delayMs:
  2482                           	opt stack 26
  2483                           
  2484                           ;delay.c: 5: for(uint16_t i = 0; i < time; ++i)
  2485                           
  2486                           ;incstack = 0
  2487  000F60  6A36               	clrf	delayMs@i,c
  2488  000F62  6A37               	clrf	delayMs@i+1,c
  2489  000F64  D009               	goto	l232
  2490  000F66                     l2512:
  2491                           
  2492                           ;delay.c: 6: {
  2493                           ;delay.c: 7: _delay((unsigned long)((1)*(8000000/4000.0)));
  2494  000F66  0E03               	movlw	3
  2495  000F68  6E35               	movwf	??_delayMs& (0+255),c
  2496  000F6A  0E98               	movlw	152
  2497  000F6C                     u2877:
  2498  000F6C  2EE8               	decfsz	wreg,f,c
  2499  000F6E  D7FE               	goto	u2877
  2500  000F70  2E35               	decfsz	??_delayMs& (0+255),f,c
  2501  000F72  D7FC               	goto	u2877
  2502  000F74  4A36               	infsnz	delayMs@i,f,c
  2503  000F76  2A37               	incf	delayMs@i+1,f,c
  2504  000F78                     l232:
  2505  000F78  5033               	movf	delayMs@time,w,c
  2506  000F7A  5C36               	subwf	delayMs@i,w,c
  2507  000F7C  5034               	movf	delayMs@time+1,w,c
  2508  000F7E  5837               	subwfb	delayMs@i+1,w,c
  2509  000F80  E3F2               	bnc	l2512
  2510  000F82  0012               	return		;funcret
  2511  000F84                     __end_of_delayMs:
  2512                           	opt stack 0
  2513                           tblptru	equ	0xFF8
  2514                           tblptrh	equ	0xFF7
  2515                           tblptrl	equ	0xFF6
  2516                           tablat	equ	0xFF5
  2517                           prodh	equ	0xFF4
  2518                           prodl	equ	0xFF3
  2519                           intcon	equ	0xFF2
  2520                           postinc0	equ	0xFEE
  2521                           wreg	equ	0xFE8
  2522                           indf2	equ	0xFDF
  2523                           postinc2	equ	0xFDE
  2524                           postdec2	equ	0xFDD
  2525                           fsr2h	equ	0xFDA
  2526                           fsr2l	equ	0xFD9
  2527                           status	equ	0xFD8
  2528                           
  2529 ;; *************** function _UART_Received *****************
  2530 ;; Defined at:
  2531 ;;		line 54 in file "app.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;  rec             1    wreg     unsigned char 
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  rec             1    4[COMRAM] unsigned char 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;		None               void
  2538 ;; Registers used:
  2539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : F/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2545 ;;      Params:         0       0       0       0       0       0       0
  2546 ;;      Locals:         1       0       0       0       0       0       0
  2547 ;;      Temps:          2       0       0       0       0       0       0
  2548 ;;      Totals:         3       0       0       0       0       0       0
  2549 ;;Total ram usage:        3 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; Hardware stack levels required when called:    4
  2552 ;; This function calls:
  2553 ;;		_processar
  2554 ;; This function is called by:
  2555 ;;		_app
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558                           
  2559                           	psect	text10
  2560  000D46                     __ptext10:
  2561                           	opt stack 0
  2562  000D46                     _UART_Received:
  2563                           	opt stack 25
  2564                           
  2565                           ;incstack = 0
  2566                           ;UART_Received@rec stored from wreg
  2567  000D46  6E35               	movwf	UART_Received@rec,c
  2568                           
  2569                           ;app.c: 57: if(rec == '{' && aux == 0)
  2570  000D48  0E7B               	movlw	123
  2571  000D4A  1835               	xorwf	UART_Received@rec,w,c
  2572  000D4C  E108               	bnz	l2524
  2573  000D4E  5016               	movf	_aux,w,c	;volatile
  2574  000D50  E106               	bnz	l2524
  2575                           
  2576                           ;app.c: 58: {
  2577                           ;app.c: 59: aux = 1;
  2578  000D52  0E01               	movlw	1
  2579  000D54  6E16               	movwf	_aux,c	;volatile
  2580                           
  2581                           ;app.c: 60: Pot = dta;
  2582  000D56  0E1D               	movlw	low _dta
  2583  000D58  6E13               	movwf	_Pot,c
  2584  000D5A  6A14               	clrf	_Pot+1,c
  2585                           
  2586                           ;app.c: 61: }
  2587  000D5C  D018               	goto	l2534
  2588  000D5E                     l2524:
  2589                           
  2590                           ;app.c: 62: else
  2591                           ;app.c: 63: if (aux == 1)
  2592  000D5E  0416               	decf	_aux,w,c	;volatile
  2593  000D60  E116               	bnz	l2534
  2594                           
  2595                           ;app.c: 64: {
  2596                           ;app.c: 65: *Pot = rec;
  2597  000D62  C013  FFD9         	movff	_Pot,fsr2l
  2598  000D66  C014  FFDA         	movff	_Pot+1,fsr2h
  2599  000D6A  C035  FFDF         	movff	UART_Received@rec,indf2
  2600                           
  2601                           ;app.c: 66: Pot++;
  2602  000D6E  4A13               	infsnz	_Pot,f,c
  2603  000D70  2A14               	incf	_Pot+1,f,c
  2604                           
  2605                           ;app.c: 68: if((Pot-dta) >= 20)
  2606  000D72  0E1D               	movlw	_dta& (0+255)
  2607  000D74  5C13               	subwf	_Pot,w,c
  2608  000D76  6E33               	movwf	??_UART_Received& (0+255),c
  2609  000D78  0E00               	movlw	0
  2610  000D7A  5814               	subwfb	_Pot+1,w,c
  2611  000D7C  6E34               	movwf	(??_UART_Received+1)& (0+255),c
  2612  000D7E  BE34               	btfsc	??_UART_Received+1,7,c
  2613  000D80  D006               	goto	l2534
  2614  000D82  5034               	movf	??_UART_Received+1,w,c
  2615  000D84  E103               	bnz	u2730
  2616  000D86  0E14               	movlw	20
  2617  000D88  5C33               	subwf	??_UART_Received,w,c
  2618  000D8A  E301               	bnc	l2534
  2619  000D8C                     u2730:
  2620                           
  2621                           ;app.c: 69: {
  2622                           ;app.c: 70: aux = 0;
  2623  000D8C  6A16               	clrf	_aux,c	;volatile
  2624  000D8E                     l2534:
  2625                           
  2626                           ;app.c: 72: }
  2627                           ;app.c: 73: }
  2628                           ;app.c: 74: if(aux == 1 && rec == '}')
  2629  000D8E  0416               	decf	_aux,w,c	;volatile
  2630  000D90  A4D8               	btfss	status,2,c
  2631  000D92  0012               	return	
  2632  000D94  0E7D               	movlw	125
  2633  000D96  1835               	xorwf	UART_Received@rec,w,c
  2634  000D98  A4D8               	btfss	status,2,c
  2635  000D9A  0012               	return	
  2636                           
  2637                           ;app.c: 75: {
  2638                           ;app.c: 78: processar();
  2639  000D9C  ECD2  F006         	call	_processar	;wreg free
  2640                           
  2641                           ;app.c: 79: aux = 0;
  2642  000DA0  6A16               	clrf	_aux,c	;volatile
  2643  000DA2  0012               	return		;funcret
  2644  000DA4                     __end_of_UART_Received:
  2645                           	opt stack 0
  2646                           tblptru	equ	0xFF8
  2647                           tblptrh	equ	0xFF7
  2648                           tblptrl	equ	0xFF6
  2649                           tablat	equ	0xFF5
  2650                           prodh	equ	0xFF4
  2651                           prodl	equ	0xFF3
  2652                           intcon	equ	0xFF2
  2653                           postinc0	equ	0xFEE
  2654                           wreg	equ	0xFE8
  2655                           indf2	equ	0xFDF
  2656                           postinc2	equ	0xFDE
  2657                           postdec2	equ	0xFDD
  2658                           fsr2h	equ	0xFDA
  2659                           fsr2l	equ	0xFD9
  2660                           status	equ	0xFD8
  2661                           
  2662 ;; *************** function _processar *****************
  2663 ;; Defined at:
  2664 ;;		line 86 in file "app.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;		None
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;		None
  2669 ;; Return value:  Size  Location     Type
  2670 ;;		None               void
  2671 ;; Registers used:
  2672 ;;		wreg, status,2, status,0
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2678 ;;      Params:         0       0       0       0       0       0       0
  2679 ;;      Locals:         0       0       0       0       0       0       0
  2680 ;;      Temps:          0       0       0       0       0       0       0
  2681 ;;      Totals:         0       0       0       0       0       0       0
  2682 ;;Total ram usage:        0 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; Hardware stack levels required when called:    3
  2685 ;; This function calls:
  2686 ;;		Nothing
  2687 ;; This function is called by:
  2688 ;;		_UART_Received
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           	psect	text11
  2693  000DA4                     __ptext11:
  2694                           	opt stack 0
  2695  000DA4                     _processar:
  2696                           	opt stack 25
  2697                           
  2698                           ;app.c: 91: if(dta[0] == '\"' && dta[1] == 'G' && dta[2] == 'P'&& dta[3] == 'I'&& dta[4]
      +                           == 'O'&& dta[5] == '1'&& dta[6] == '\"')
  2699                           
  2700                           ;incstack = 0
  2701  000DA4  0E22               	movlw	34
  2702  000DA6  181D               	xorwf	_dta,w,c
  2703  000DA8  A4D8               	btfss	status,2,c
  2704  000DAA  0012               	return	
  2705  000DAC  0E47               	movlw	71
  2706  000DAE  181E               	xorwf	_dta+1,w,c	;volatile
  2707  000DB0  A4D8               	btfss	status,2,c
  2708  000DB2  0012               	return	
  2709  000DB4  0E50               	movlw	80
  2710  000DB6  181F               	xorwf	_dta+2,w,c	;volatile
  2711  000DB8  A4D8               	btfss	status,2,c
  2712  000DBA  0012               	return	
  2713  000DBC  0E49               	movlw	73
  2714  000DBE  1820               	xorwf	_dta+3,w,c	;volatile
  2715  000DC0  A4D8               	btfss	status,2,c
  2716  000DC2  0012               	return	
  2717  000DC4  0E4F               	movlw	79
  2718  000DC6  1821               	xorwf	_dta+4,w,c	;volatile
  2719  000DC8  A4D8               	btfss	status,2,c
  2720  000DCA  0012               	return	
  2721  000DCC  0E31               	movlw	49
  2722  000DCE  1822               	xorwf	_dta+5,w,c	;volatile
  2723  000DD0  A4D8               	btfss	status,2,c
  2724  000DD2  0012               	return	
  2725  000DD4  0E22               	movlw	34
  2726  000DD6  1823               	xorwf	_dta+6,w,c	;volatile
  2727  000DD8  A4D8               	btfss	status,2,c
  2728  000DDA  0012               	return	
  2729                           
  2730                           ;app.c: 92: {
  2731                           ;app.c: 93: if(dta[7] == ':')
  2732  000DDC  0E3A               	movlw	58
  2733  000DDE  1824               	xorwf	_dta+7,w,c	;volatile
  2734  000DE0  E005               	bz	l2140
  2735  000DE2  0012               	return	
  2736  000DE4                     l224:
  2737  000DE4  908C               	bcf	3980,0,c	;volatile
  2738  000DE6  0012               	return	
  2739  000DE8                     l226:
  2740  000DE8  808C               	bsf	3980,0,c	;volatile
  2741  000DEA  0012               	return	
  2742  000DEC                     l2140:
  2743  000DEC  5025               	movf	_dta+8,w,c	;volatile
  2744                           
  2745                           ; Switch size 1, requested type "speed"
  2746                           ; Number of cases is 2, Range of values is 48 to 49
  2747                           ; switch strategies available:
  2748                           ; Name         Instructions Cycles
  2749                           ; simple_byte            7     4 (average)
  2750                           ;	Chosen strategy is simple_byte
  2751  000DEE  0A30               	xorlw	48	; case 48
  2752  000DF0  E0F9               	bz	l224
  2753  000DF2  0A01               	xorlw	1	; case 49
  2754  000DF4  E0F9               	bz	l226
  2755  000DF6  0012               	return		;funcret
  2756  000DF8                     __end_of_processar:
  2757                           	opt stack 0
  2758                           tblptru	equ	0xFF8
  2759                           tblptrh	equ	0xFF7
  2760                           tblptrl	equ	0xFF6
  2761                           tablat	equ	0xFF5
  2762                           prodh	equ	0xFF4
  2763                           prodl	equ	0xFF3
  2764                           intcon	equ	0xFF2
  2765                           postinc0	equ	0xFEE
  2766                           wreg	equ	0xFE8
  2767                           indf2	equ	0xFDF
  2768                           postinc2	equ	0xFDE
  2769                           postdec2	equ	0xFDD
  2770                           fsr2h	equ	0xFDA
  2771                           fsr2l	equ	0xFD9
  2772                           status	equ	0xFD8
  2773                           
  2774 ;; *************** function _EUSART1_Read *****************
  2775 ;; Defined at:
  2776 ;;		line 113 in file "mcc_generated_files/eusart1.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;		None
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;  readValue       1    2[COMRAM] unsigned char 
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  1    wreg      unsigned char 
  2783 ;; Registers used:
  2784 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/F
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2790 ;;      Params:         0       0       0       0       0       0       0
  2791 ;;      Locals:         1       0       0       0       0       0       0
  2792 ;;      Temps:          0       0       0       0       0       0       0
  2793 ;;      Totals:         1       0       0       0       0       0       0
  2794 ;;Total ram usage:        1 bytes
  2795 ;; Hardware stack levels used:    1
  2796 ;; Hardware stack levels required when called:    3
  2797 ;; This function calls:
  2798 ;;		Nothing
  2799 ;; This function is called by:
  2800 ;;		_app
  2801 ;; This function uses a non-reentrant model
  2802 ;;
  2803                           
  2804                           	psect	text12
  2805  000F84                     __ptext12:
  2806                           	opt stack 0
  2807  000F84                     _EUSART1_Read:
  2808                           	opt stack 26
  2809  000F84                     l2200:
  2810  000F84  5017               	movf	_eusart1RxCount,w,c	;volatile
  2811  000F86  E0FE               	bz	l2200
  2812                           
  2813                           ;eusart1.c: 117: }
  2814                           ;eusart1.c: 119: PIE1bits.RC1IE = 0;
  2815  000F88  9A9D               	bcf	3997,5,c	;volatile
  2816                           
  2817                           ;eusart1.c: 121: readValue = eusart1RxBuffer[eusart1RxTail++];
  2818  000F8A  5019               	movf	_eusart1RxTail,w,c
  2819  000F8C  0F01               	addlw	low _eusart1RxBuffer
  2820  000F8E  6ED9               	movwf	fsr2l,c
  2821  000F90  6ADA               	clrf	fsr2h,c
  2822  000F92  50DF               	movf	indf2,w,c
  2823  000F94  6E33               	movwf	EUSART1_Read@readValue,c
  2824  000F96  2A19               	incf	_eusart1RxTail,f,c
  2825                           
  2826                           ;eusart1.c: 122: if (sizeof (eusart1RxBuffer) <= eusart1RxTail) {
  2827  000F98  0E07               	movlw	7
  2828  000F9A  6419               	cpfsgt	_eusart1RxTail,c
  2829  000F9C  D001               	goto	l2210
  2830                           
  2831                           ;eusart1.c: 123: eusart1RxTail = 0;
  2832  000F9E  6A19               	clrf	_eusart1RxTail,c
  2833  000FA0                     l2210:
  2834                           
  2835                           ;eusart1.c: 124: }
  2836                           ;eusart1.c: 125: eusart1RxCount--;
  2837  000FA0  0617               	decf	_eusart1RxCount,f,c	;volatile
  2838                           
  2839                           ;eusart1.c: 126: PIE1bits.RC1IE = 1;
  2840  000FA2  8A9D               	bsf	3997,5,c	;volatile
  2841                           
  2842                           ;eusart1.c: 128: return readValue;
  2843  000FA4  5033               	movf	EUSART1_Read@readValue,w,c
  2844  000FA6  0012               	return		;funcret
  2845  000FA8                     __end_of_EUSART1_Read:
  2846                           	opt stack 0
  2847                           tblptru	equ	0xFF8
  2848                           tblptrh	equ	0xFF7
  2849                           tblptrl	equ	0xFF6
  2850                           tablat	equ	0xFF5
  2851                           prodh	equ	0xFF4
  2852                           prodl	equ	0xFF3
  2853                           intcon	equ	0xFF2
  2854                           postinc0	equ	0xFEE
  2855                           wreg	equ	0xFE8
  2856                           indf2	equ	0xFDF
  2857                           postinc2	equ	0xFDE
  2858                           postdec2	equ	0xFDD
  2859                           fsr2h	equ	0xFDA
  2860                           fsr2l	equ	0xFD9
  2861                           status	equ	0xFD8
  2862                           
  2863 ;; *************** function _ADC_GetConversion *****************
  2864 ;; Defined at:
  2865 ;;		line 100 in file "mcc_generated_files/adc.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;  channel         1    wreg     enum E7855
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;  channel         1    6[COMRAM] enum E7855
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  2    2[COMRAM] unsigned int 
  2872 ;; Registers used:
  2873 ;;		wreg, status,2, status,0
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/F
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2879 ;;      Params:         2       0       0       0       0       0       0
  2880 ;;      Locals:         1       0       0       0       0       0       0
  2881 ;;      Temps:          2       0       0       0       0       0       0
  2882 ;;      Totals:         5       0       0       0       0       0       0
  2883 ;;Total ram usage:        5 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    3
  2886 ;; This function calls:
  2887 ;;		Nothing
  2888 ;; This function is called by:
  2889 ;;		_app
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           	psect	text13
  2894  000EB4                     __ptext13:
  2895                           	opt stack 0
  2896  000EB4                     _ADC_GetConversion:
  2897                           	opt stack 26
  2898                           
  2899                           ;incstack = 0
  2900                           ;ADC_GetConversion@channel stored from wreg
  2901  000EB4  6E37               	movwf	ADC_GetConversion@channel,c
  2902                           
  2903                           ;adc.c: 102: ADCON0bits.CHS = channel;
  2904  000EB6  C037  F035         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  2905  000EBA  4635               	rlncf	??_ADC_GetConversion,f,c
  2906  000EBC  4635               	rlncf	??_ADC_GetConversion,f,c
  2907  000EBE  50C2               	movf	4034,w,c	;volatile
  2908  000EC0  1835               	xorwf	??_ADC_GetConversion,w,c
  2909  000EC2  0B83               	andlw	-125
  2910  000EC4  1835               	xorwf	??_ADC_GetConversion,w,c
  2911  000EC6  6EC2               	movwf	4034,c	;volatile
  2912                           
  2913                           ;adc.c: 105: ADCON0bits.ADON = 1;
  2914  000EC8  80C2               	bsf	4034,0,c	;volatile
  2915                           
  2916                           ;adc.c: 109: ADCON0bits.GO_nDONE = 1;
  2917  000ECA  82C2               	bsf	4034,1,c	;volatile
  2918  000ECC                     l307:
  2919  000ECC  B2C2               	btfsc	4034,1,c	;volatile
  2920  000ECE  D7FE               	goto	l307
  2921                           
  2922                           ;adc.c: 113: }
  2923                           ;adc.c: 116: return ((ADRESH << 8) + ADRESL);
  2924  000ED0  50C4               	movf	4036,w,c	;volatile
  2925  000ED2  6E36               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  2926  000ED4  6A35               	clrf	??_ADC_GetConversion& (0+255),c
  2927  000ED6  50C3               	movf	4035,w,c	;volatile
  2928  000ED8  2435               	addwf	??_ADC_GetConversion,w,c
  2929  000EDA  6E33               	movwf	?_ADC_GetConversion,c
  2930  000EDC  0E00               	movlw	0
  2931  000EDE  2036               	addwfc	??_ADC_GetConversion+1,w,c
  2932  000EE0  6E34               	movwf	?_ADC_GetConversion+1,c
  2933  000EE2  0012               	return		;funcret
  2934  000EE4                     __end_of_ADC_GetConversion:
  2935                           	opt stack 0
  2936                           tblptru	equ	0xFF8
  2937                           tblptrh	equ	0xFF7
  2938                           tblptrl	equ	0xFF6
  2939                           tablat	equ	0xFF5
  2940                           prodh	equ	0xFF4
  2941                           prodl	equ	0xFF3
  2942                           intcon	equ	0xFF2
  2943                           postinc0	equ	0xFEE
  2944                           wreg	equ	0xFE8
  2945                           indf2	equ	0xFDF
  2946                           postinc2	equ	0xFDE
  2947                           postdec2	equ	0xFDD
  2948                           fsr2h	equ	0xFDA
  2949                           fsr2l	equ	0xFD9
  2950                           status	equ	0xFD8
  2951                           
  2952 ;; *************** function _SYSTEM_Initialize *****************
  2953 ;; Defined at:
  2954 ;;		line 112 in file "mcc_generated_files/mcc.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;		None
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;		None
  2959 ;; Return value:  Size  Location     Type
  2960 ;;		None               void
  2961 ;; Registers used:
  2962 ;;		wreg, status,2, cstack
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : F/F
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2968 ;;      Params:         0       0       0       0       0       0       0
  2969 ;;      Locals:         0       0       0       0       0       0       0
  2970 ;;      Temps:          0       0       0       0       0       0       0
  2971 ;;      Totals:         0       0       0       0       0       0       0
  2972 ;;Total ram usage:        0 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    5
  2975 ;; This function calls:
  2976 ;;		_ADC_Initialize
  2977 ;;		_EUSART1_Initialize
  2978 ;;		_INTERRUPT_Initialize
  2979 ;;		_OSCILLATOR_Initialize
  2980 ;;		_PIN_MANAGER_Initialize
  2981 ;;		_TMR0_Initialize
  2982 ;; This function is called by:
  2983 ;;		_main
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           	psect	text14
  2988  001064                     __ptext14:
  2989                           	opt stack 0
  2990  001064                     _SYSTEM_Initialize:
  2991                           	opt stack 25
  2992                           
  2993                           ;mcc.c: 113: OSCILLATOR_Initialize();
  2994                           
  2995                           ;incstack = 0
  2996  001064  EC4E  F008         	call	_OSCILLATOR_Initialize	;wreg free
  2997                           
  2998                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  2999  001068  EC40  F007         	call	_PIN_MANAGER_Initialize	;wreg free
  3000                           
  3001                           ; BSR set to: 15
  3002                           ;mcc.c: 115: INTERRUPT_Initialize();
  3003  00106C  EC54  F008         	call	_INTERRUPT_Initialize	;wreg free
  3004                           
  3005                           ; BSR set to: 15
  3006                           ;mcc.c: 116: EUSART1_Initialize();
  3007  001070  EC89  F007         	call	_EUSART1_Initialize	;wreg free
  3008                           
  3009                           ; BSR set to: 15
  3010                           ;mcc.c: 117: TMR0_Initialize();
  3011  001074  EC17  F008         	call	_TMR0_Initialize	;wreg free
  3012                           
  3013                           ; BSR set to: 15
  3014                           ;mcc.c: 118: ADC_Initialize();
  3015  001078  EF3E  F008         	goto	_ADC_Initialize	;wreg free
  3016  00107C                     __end_of_SYSTEM_Initialize:
  3017                           	opt stack 0
  3018                           tblptru	equ	0xFF8
  3019                           tblptrh	equ	0xFF7
  3020                           tblptrl	equ	0xFF6
  3021                           tablat	equ	0xFF5
  3022                           prodh	equ	0xFF4
  3023                           prodl	equ	0xFF3
  3024                           intcon	equ	0xFF2
  3025                           postinc0	equ	0xFEE
  3026                           wreg	equ	0xFE8
  3027                           indf2	equ	0xFDF
  3028                           postinc2	equ	0xFDE
  3029                           postdec2	equ	0xFDD
  3030                           fsr2h	equ	0xFDA
  3031                           fsr2l	equ	0xFD9
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function _TMR0_Initialize *****************
  3035 ;; Defined at:
  3036 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;		None
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;		None
  3041 ;; Return value:  Size  Location     Type
  3042 ;;		None               void
  3043 ;; Registers used:
  3044 ;;		wreg, status,2, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : F/F
  3047 ;;		On exit  : F/F
  3048 ;;		Unchanged: E/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3050 ;;      Params:         0       0       0       0       0       0       0
  3051 ;;      Locals:         0       0       0       0       0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0
  3053 ;;      Totals:         0       0       0       0       0       0       0
  3054 ;;Total ram usage:        0 bytes
  3055 ;; Hardware stack levels used:    1
  3056 ;; Hardware stack levels required when called:    4
  3057 ;; This function calls:
  3058 ;;		_TMR0_StartTimer
  3059 ;; This function is called by:
  3060 ;;		_SYSTEM_Initialize
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           	psect	text15
  3065  00102E                     __ptext15:
  3066                           	opt stack 0
  3067  00102E                     _TMR0_Initialize:
  3068                           	opt stack 25
  3069                           
  3070                           ; BSR set to: 15
  3071                           ;tmr0.c: 68: T0CON = 0x96;
  3072                           
  3073                           ; BSR set to: 15
  3074                           ;incstack = 0
  3075  00102E  0E96               	movlw	150
  3076  001030  6ED5               	movwf	4053,c	;volatile
  3077                           
  3078                           ;tmr0.c: 71: TMR0H = 0xC2;
  3079  001032  0EC2               	movlw	194
  3080  001034  6ED7               	movwf	4055,c	;volatile
  3081                           
  3082                           ;tmr0.c: 74: TMR0L = 0xF7;
  3083  001036  0EF7               	movlw	247
  3084  001038  6ED6               	movwf	4054,c	;volatile
  3085                           
  3086                           ;tmr0.c: 77: timer0ReloadVal16bit = 49911;
  3087  00103A  0EC2               	movlw	194
  3088  00103C  6E59               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  3089  00103E  0EF7               	movlw	247
  3090  001040  6E58               	movwf	_timer0ReloadVal16bit,c	;volatile
  3091                           
  3092                           ; BSR set to: 15
  3093                           ;tmr0.c: 80: INTCONbits.TMR0IF = 0;
  3094  001042  94F2               	bcf	intcon,2,c	;volatile
  3095                           
  3096                           ; BSR set to: 15
  3097                           ;tmr0.c: 83: INTCONbits.TMR0IE = 1;
  3098  001044  8AF2               	bsf	intcon,5,c	;volatile
  3099                           
  3100                           ; BSR set to: 15
  3101                           ;tmr0.c: 86: TMR0_StartTimer();
  3102  001046  EF60  F008         	goto	_TMR0_StartTimer	;wreg free
  3103  00104A                     __end_of_TMR0_Initialize:
  3104                           	opt stack 0
  3105                           tblptru	equ	0xFF8
  3106                           tblptrh	equ	0xFF7
  3107                           tblptrl	equ	0xFF6
  3108                           tablat	equ	0xFF5
  3109                           prodh	equ	0xFF4
  3110                           prodl	equ	0xFF3
  3111                           intcon	equ	0xFF2
  3112                           postinc0	equ	0xFEE
  3113                           wreg	equ	0xFE8
  3114                           indf2	equ	0xFDF
  3115                           postinc2	equ	0xFDE
  3116                           postdec2	equ	0xFDD
  3117                           fsr2h	equ	0xFDA
  3118                           fsr2l	equ	0xFD9
  3119                           status	equ	0xFD8
  3120                           
  3121 ;; *************** function _TMR0_StartTimer *****************
  3122 ;; Defined at:
  3123 ;;		line 89 in file "mcc_generated_files/tmr0.c"
  3124 ;; Parameters:    Size  Location     Type
  3125 ;;		None
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;		None
  3128 ;; Return value:  Size  Location     Type
  3129 ;;		None               void
  3130 ;; Registers used:
  3131 ;;		None
  3132 ;; Tracked objects:
  3133 ;;		On entry : F/F
  3134 ;;		On exit  : F/F
  3135 ;;		Unchanged: E/0
  3136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3137 ;;      Params:         0       0       0       0       0       0       0
  3138 ;;      Locals:         0       0       0       0       0       0       0
  3139 ;;      Temps:          0       0       0       0       0       0       0
  3140 ;;      Totals:         0       0       0       0       0       0       0
  3141 ;;Total ram usage:        0 bytes
  3142 ;; Hardware stack levels used:    1
  3143 ;; Hardware stack levels required when called:    3
  3144 ;; This function calls:
  3145 ;;		Nothing
  3146 ;; This function is called by:
  3147 ;;		_TMR0_Initialize
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           	psect	text16
  3152  0010C0                     __ptext16:
  3153                           	opt stack 0
  3154  0010C0                     _TMR0_StartTimer:
  3155                           	opt stack 25
  3156                           
  3157                           ; BSR set to: 15
  3158                           ;tmr0.c: 91: T0CONbits.TMR0ON = 1;
  3159                           
  3160                           ; BSR set to: 15
  3161                           ;incstack = 0
  3162  0010C0  8ED5               	bsf	4053,7,c	;volatile
  3163                           
  3164                           ; BSR set to: 15
  3165  0010C2  0012               	return		;funcret
  3166  0010C4                     __end_of_TMR0_StartTimer:
  3167                           	opt stack 0
  3168                           tblptru	equ	0xFF8
  3169                           tblptrh	equ	0xFF7
  3170                           tblptrl	equ	0xFF6
  3171                           tablat	equ	0xFF5
  3172                           prodh	equ	0xFF4
  3173                           prodl	equ	0xFF3
  3174                           intcon	equ	0xFF2
  3175                           postinc0	equ	0xFEE
  3176                           wreg	equ	0xFE8
  3177                           indf2	equ	0xFDF
  3178                           postinc2	equ	0xFDE
  3179                           postdec2	equ	0xFDD
  3180                           fsr2h	equ	0xFDA
  3181                           fsr2l	equ	0xFD9
  3182                           status	equ	0xFD8
  3183                           
  3184 ;; *************** function _PIN_MANAGER_Initialize *****************
  3185 ;; Defined at:
  3186 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;		None
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;		None
  3191 ;; Return value:  Size  Location     Type
  3192 ;;		None               void
  3193 ;; Registers used:
  3194 ;;		wreg, status,2
  3195 ;; Tracked objects:
  3196 ;;		On entry : 0/0
  3197 ;;		On exit  : F/F
  3198 ;;		Unchanged: 0/0
  3199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3200 ;;      Params:         0       0       0       0       0       0       0
  3201 ;;      Locals:         0       0       0       0       0       0       0
  3202 ;;      Temps:          0       0       0       0       0       0       0
  3203 ;;      Totals:         0       0       0       0       0       0       0
  3204 ;;Total ram usage:        0 bytes
  3205 ;; Hardware stack levels used:    1
  3206 ;; Hardware stack levels required when called:    3
  3207 ;; This function calls:
  3208 ;;		Nothing
  3209 ;; This function is called by:
  3210 ;;		_SYSTEM_Initialize
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           	psect	text17
  3215  000E80                     __ptext17:
  3216                           	opt stack 0
  3217  000E80                     _PIN_MANAGER_Initialize:
  3218                           	opt stack 26
  3219                           
  3220                           ;pin_manager.c: 51: LATA = 0x01;
  3221                           
  3222                           ; BSR set to: 15
  3223                           ;incstack = 0
  3224  000E80  0E01               	movlw	1
  3225  000E82  6E89               	movwf	3977,c	;volatile
  3226                           
  3227                           ;pin_manager.c: 52: TRISA = 0xFF;
  3228  000E84  6892               	setf	3986,c	;volatile
  3229                           
  3230                           ;pin_manager.c: 53: ANSELA = 0x2F;
  3231  000E86  0E2F               	movlw	47
  3232  000E88  010F               	movlb	15	; () banked
  3233  000E8A  6F38               	movwf	56,b	;volatile
  3234                           
  3235                           ; BSR set to: 15
  3236                           ;pin_manager.c: 55: LATB = 0x00;
  3237  000E8C  6A8A               	clrf	3978,c	;volatile
  3238                           
  3239                           ; BSR set to: 15
  3240                           ;pin_manager.c: 56: TRISB = 0xFF;
  3241  000E8E  6893               	setf	3987,c	;volatile
  3242                           
  3243                           ;pin_manager.c: 57: ANSELB = 0x3E;
  3244  000E90  0E3E               	movlw	62
  3245  000E92  6F39               	movwf	57,b	;volatile
  3246                           
  3247                           ;pin_manager.c: 58: WPUB = 0x01;
  3248  000E94  0E01               	movlw	1
  3249  000E96  6E61               	movwf	3937,c	;volatile
  3250                           
  3251                           ; BSR set to: 15
  3252                           ;pin_manager.c: 60: LATC = 0x00;
  3253  000E98  6A8B               	clrf	3979,c	;volatile
  3254                           
  3255                           ; BSR set to: 15
  3256                           ;pin_manager.c: 61: TRISC = 0xFF;
  3257  000E9A  6894               	setf	3988,c	;volatile
  3258                           
  3259                           ;pin_manager.c: 62: ANSELC = 0x3C;
  3260  000E9C  0E3C               	movlw	60
  3261  000E9E  6F3A               	movwf	58,b	;volatile
  3262                           
  3263                           ; BSR set to: 15
  3264                           ;pin_manager.c: 64: LATD = 0x00;
  3265  000EA0  6A8C               	clrf	3980,c	;volatile
  3266                           
  3267                           ;pin_manager.c: 65: TRISD = 0xFC;
  3268  000EA2  0EFC               	movlw	252
  3269  000EA4  6E95               	movwf	3989,c	;volatile
  3270                           
  3271                           ;pin_manager.c: 66: ANSELD = 0xFC;
  3272  000EA6  6F3B               	movwf	59,b	;volatile
  3273                           
  3274                           ; BSR set to: 15
  3275                           ;pin_manager.c: 68: LATE = 0x00;
  3276  000EA8  6A8D               	clrf	3981,c	;volatile
  3277                           
  3278                           ;pin_manager.c: 69: TRISE = 0x07;
  3279  000EAA  0E07               	movlw	7
  3280  000EAC  6E96               	movwf	3990,c	;volatile
  3281                           
  3282                           ;pin_manager.c: 70: ANSELE = 0x07;
  3283  000EAE  6F3C               	movwf	60,b	;volatile
  3284                           
  3285                           ; BSR set to: 15
  3286                           ;pin_manager.c: 72: INTCON2bits.nRBPU = 0x00;
  3287  000EB0  9EF1               	bcf	intcon2,7,c	;volatile
  3288                           
  3289                           ; BSR set to: 15
  3290  000EB2  0C07               	retlw	7	;funcret
  3291  000EB4                     __end_of_PIN_MANAGER_Initialize:
  3292                           	opt stack 0
  3293                           tblptru	equ	0xFF8
  3294                           tblptrh	equ	0xFF7
  3295                           tblptrl	equ	0xFF6
  3296                           tablat	equ	0xFF5
  3297                           prodh	equ	0xFF4
  3298                           prodl	equ	0xFF3
  3299                           intcon	equ	0xFF2
  3300                           intcon2	equ	0xFF1
  3301                           postinc0	equ	0xFEE
  3302                           wreg	equ	0xFE8
  3303                           indf2	equ	0xFDF
  3304                           postinc2	equ	0xFDE
  3305                           postdec2	equ	0xFDD
  3306                           fsr2h	equ	0xFDA
  3307                           fsr2l	equ	0xFD9
  3308                           status	equ	0xFD8
  3309                           
  3310 ;; *************** function _OSCILLATOR_Initialize *****************
  3311 ;; Defined at:
  3312 ;;		line 121 in file "mcc_generated_files/mcc.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;		None
  3315 ;; Auto vars:     Size  Location     Type
  3316 ;;		None
  3317 ;; Return value:  Size  Location     Type
  3318 ;;		None               void
  3319 ;; Registers used:
  3320 ;;		wreg, status,2
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3326 ;;      Params:         0       0       0       0       0       0       0
  3327 ;;      Locals:         0       0       0       0       0       0       0
  3328 ;;      Temps:          0       0       0       0       0       0       0
  3329 ;;      Totals:         0       0       0       0       0       0       0
  3330 ;;Total ram usage:        0 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:    3
  3333 ;; This function calls:
  3334 ;;		Nothing
  3335 ;; This function is called by:
  3336 ;;		_SYSTEM_Initialize
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           	psect	text18
  3341  00109C                     __ptext18:
  3342                           	opt stack 0
  3343  00109C                     _OSCILLATOR_Initialize:
  3344                           	opt stack 26
  3345                           
  3346                           ;mcc.c: 123: OSCCON = 0x30;
  3347                           
  3348                           ; BSR set to: 15
  3349                           ;incstack = 0
  3350  00109C  0E30               	movlw	48
  3351  00109E  6ED3               	movwf	4051,c	;volatile
  3352                           
  3353                           ;mcc.c: 125: OSCCON2 = 0x04;
  3354  0010A0  0E04               	movlw	4
  3355  0010A2  6ED2               	movwf	4050,c	;volatile
  3356                           
  3357                           ;mcc.c: 127: OSCTUNE = 0x00;
  3358  0010A4  6A9B               	clrf	3995,c	;volatile
  3359  0010A6  0012               	return		;funcret
  3360  0010A8                     __end_of_OSCILLATOR_Initialize:
  3361                           	opt stack 0
  3362                           tblptru	equ	0xFF8
  3363                           tblptrh	equ	0xFF7
  3364                           tblptrl	equ	0xFF6
  3365                           tablat	equ	0xFF5
  3366                           prodh	equ	0xFF4
  3367                           prodl	equ	0xFF3
  3368                           intcon	equ	0xFF2
  3369                           intcon2	equ	0xFF1
  3370                           postinc0	equ	0xFEE
  3371                           wreg	equ	0xFE8
  3372                           indf2	equ	0xFDF
  3373                           postinc2	equ	0xFDE
  3374                           postdec2	equ	0xFDD
  3375                           fsr2h	equ	0xFDA
  3376                           fsr2l	equ	0xFD9
  3377                           status	equ	0xFD8
  3378                           
  3379 ;; *************** function _INTERRUPT_Initialize *****************
  3380 ;; Defined at:
  3381 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;		None
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;		None
  3386 ;; Return value:  Size  Location     Type
  3387 ;;		None               void
  3388 ;; Registers used:
  3389 ;;		None
  3390 ;; Tracked objects:
  3391 ;;		On entry : F/F
  3392 ;;		On exit  : F/F
  3393 ;;		Unchanged: E/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3395 ;;      Params:         0       0       0       0       0       0       0
  3396 ;;      Locals:         0       0       0       0       0       0       0
  3397 ;;      Temps:          0       0       0       0       0       0       0
  3398 ;;      Totals:         0       0       0       0       0       0       0
  3399 ;;Total ram usage:        0 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    3
  3402 ;; This function calls:
  3403 ;;		Nothing
  3404 ;; This function is called by:
  3405 ;;		_SYSTEM_Initialize
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           	psect	text19
  3410  0010A8                     __ptext19:
  3411                           	opt stack 0
  3412  0010A8                     _INTERRUPT_Initialize:
  3413                           	opt stack 26
  3414                           
  3415                           ; BSR set to: 15
  3416                           ;interrupt_manager.c: 54: RCONbits.IPEN = 1;
  3417                           
  3418                           ;incstack = 0
  3419  0010A8  8ED0               	bsf	4048,7,c	;volatile
  3420                           
  3421                           ;interrupt_manager.c: 59: INTCON2bits.TMR0IP = 1;
  3422  0010AA  84F1               	bsf	intcon2,2,c	;volatile
  3423                           
  3424                           ;interrupt_manager.c: 62: IPR1bits.RC1IP = 1;
  3425  0010AC  8A9F               	bsf	3999,5,c	;volatile
  3426                           
  3427                           ;interrupt_manager.c: 65: IPR1bits.TX1IP = 1;
  3428  0010AE  889F               	bsf	3999,4,c	;volatile
  3429                           
  3430                           ; BSR set to: 15
  3431  0010B0  0012               	return		;funcret
  3432  0010B2                     __end_of_INTERRUPT_Initialize:
  3433                           	opt stack 0
  3434                           tblptru	equ	0xFF8
  3435                           tblptrh	equ	0xFF7
  3436                           tblptrl	equ	0xFF6
  3437                           tablat	equ	0xFF5
  3438                           prodh	equ	0xFF4
  3439                           prodl	equ	0xFF3
  3440                           intcon	equ	0xFF2
  3441                           intcon2	equ	0xFF1
  3442                           postinc0	equ	0xFEE
  3443                           wreg	equ	0xFE8
  3444                           indf2	equ	0xFDF
  3445                           postinc2	equ	0xFDE
  3446                           postdec2	equ	0xFDD
  3447                           fsr2h	equ	0xFDA
  3448                           fsr2l	equ	0xFD9
  3449                           status	equ	0xFD8
  3450                           
  3451 ;; *************** function _EUSART1_Initialize *****************
  3452 ;; Defined at:
  3453 ;;		line 77 in file "mcc_generated_files/eusart1.c"
  3454 ;; Parameters:    Size  Location     Type
  3455 ;;		None
  3456 ;; Auto vars:     Size  Location     Type
  3457 ;;		None
  3458 ;; Return value:  Size  Location     Type
  3459 ;;		None               void
  3460 ;; Registers used:
  3461 ;;		wreg, status,2
  3462 ;; Tracked objects:
  3463 ;;		On entry : F/F
  3464 ;;		On exit  : F/F
  3465 ;;		Unchanged: E/0
  3466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3467 ;;      Params:         0       0       0       0       0       0       0
  3468 ;;      Locals:         0       0       0       0       0       0       0
  3469 ;;      Temps:          0       0       0       0       0       0       0
  3470 ;;      Totals:         0       0       0       0       0       0       0
  3471 ;;Total ram usage:        0 bytes
  3472 ;; Hardware stack levels used:    1
  3473 ;; Hardware stack levels required when called:    3
  3474 ;; This function calls:
  3475 ;;		Nothing
  3476 ;; This function is called by:
  3477 ;;		_SYSTEM_Initialize
  3478 ;; This function uses a non-reentrant model
  3479 ;;
  3480                           
  3481                           	psect	text20
  3482  000F12                     __ptext20:
  3483                           	opt stack 0
  3484  000F12                     _EUSART1_Initialize:
  3485                           	opt stack 26
  3486                           
  3487                           ; BSR set to: 15
  3488                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
  3489                           
  3490                           ; BSR set to: 15
  3491                           ;incstack = 0
  3492  000F12  9A9D               	bcf	3997,5,c	;volatile
  3493                           
  3494                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  3495  000F14  989D               	bcf	3997,4,c	;volatile
  3496                           
  3497                           ; BSR set to: 15
  3498                           ;eusart1.c: 85: BAUD1CON = 0x48;
  3499  000F16  0E48               	movlw	72
  3500  000F18  6EB8               	movwf	4024,c	;volatile
  3501                           
  3502                           ;eusart1.c: 88: RC1STA = 0x90;
  3503  000F1A  0E90               	movlw	144
  3504  000F1C  6EAB               	movwf	4011,c	;volatile
  3505                           
  3506                           ;eusart1.c: 91: TX1STA = 0x26;
  3507  000F1E  0E26               	movlw	38
  3508  000F20  6EAC               	movwf	4012,c	;volatile
  3509                           
  3510                           ;eusart1.c: 94: SPBRG1 = 0xCF;
  3511  000F22  0ECF               	movlw	207
  3512  000F24  6EAF               	movwf	4015,c	;volatile
  3513                           
  3514                           ; BSR set to: 15
  3515                           ;eusart1.c: 97: SPBRGH1 = 0x00;
  3516  000F26  6AB0               	clrf	4016,c	;volatile
  3517                           
  3518                           ; BSR set to: 15
  3519                           ;eusart1.c: 101: eusart1TxHead = 0;
  3520  000F28  6A1A               	clrf	_eusart1TxHead,c
  3521                           
  3522                           ; BSR set to: 15
  3523                           ;eusart1.c: 102: eusart1TxTail = 0;
  3524  000F2A  6A1B               	clrf	_eusart1TxTail,c
  3525                           
  3526                           ;eusart1.c: 103: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
  3527  000F2C  0E08               	movlw	8
  3528  000F2E  6E5A               	movwf	_eusart1TxBufferRemaining,c	;volatile
  3529                           
  3530                           ; BSR set to: 15
  3531                           ;eusart1.c: 105: eusart1RxHead = 0;
  3532  000F30  6A18               	clrf	_eusart1RxHead,c
  3533                           
  3534                           ; BSR set to: 15
  3535                           ;eusart1.c: 106: eusart1RxTail = 0;
  3536  000F32  6A19               	clrf	_eusart1RxTail,c
  3537                           
  3538                           ; BSR set to: 15
  3539                           ;eusart1.c: 107: eusart1RxCount = 0;
  3540  000F34  6A17               	clrf	_eusart1RxCount,c	;volatile
  3541                           
  3542                           ; BSR set to: 15
  3543                           ;eusart1.c: 110: PIE1bits.RC1IE = 1;
  3544  000F36  8A9D               	bsf	3997,5,c	;volatile
  3545                           
  3546                           ; BSR set to: 15
  3547  000F38  0012               	return		;funcret
  3548  000F3A                     __end_of_EUSART1_Initialize:
  3549                           	opt stack 0
  3550                           tblptru	equ	0xFF8
  3551                           tblptrh	equ	0xFF7
  3552                           tblptrl	equ	0xFF6
  3553                           tablat	equ	0xFF5
  3554                           prodh	equ	0xFF4
  3555                           prodl	equ	0xFF3
  3556                           intcon	equ	0xFF2
  3557                           intcon2	equ	0xFF1
  3558                           postinc0	equ	0xFEE
  3559                           wreg	equ	0xFE8
  3560                           indf2	equ	0xFDF
  3561                           postinc2	equ	0xFDE
  3562                           postdec2	equ	0xFDD
  3563                           fsr2h	equ	0xFDA
  3564                           fsr2l	equ	0xFD9
  3565                           status	equ	0xFD8
  3566                           
  3567 ;; *************** function _ADC_Initialize *****************
  3568 ;; Defined at:
  3569 ;;		line 58 in file "mcc_generated_files/adc.c"
  3570 ;; Parameters:    Size  Location     Type
  3571 ;;		None
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;		None
  3574 ;; Return value:  Size  Location     Type
  3575 ;;		None               void
  3576 ;; Registers used:
  3577 ;;		wreg, status,2
  3578 ;; Tracked objects:
  3579 ;;		On entry : F/F
  3580 ;;		On exit  : F/F
  3581 ;;		Unchanged: E/0
  3582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3583 ;;      Params:         0       0       0       0       0       0       0
  3584 ;;      Locals:         0       0       0       0       0       0       0
  3585 ;;      Temps:          0       0       0       0       0       0       0
  3586 ;;      Totals:         0       0       0       0       0       0       0
  3587 ;;Total ram usage:        0 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:    3
  3590 ;; This function calls:
  3591 ;;		Nothing
  3592 ;; This function is called by:
  3593 ;;		_SYSTEM_Initialize
  3594 ;; This function uses a non-reentrant model
  3595 ;;
  3596                           
  3597                           	psect	text21
  3598  00107C                     __ptext21:
  3599                           	opt stack 0
  3600  00107C                     _ADC_Initialize:
  3601                           	opt stack 26
  3602                           
  3603                           ; BSR set to: 15
  3604                           ;adc.c: 62: ADCON0 = 0x01;
  3605                           
  3606                           ; BSR set to: 15
  3607                           ;incstack = 0
  3608  00107C  0E01               	movlw	1
  3609  00107E  6EC2               	movwf	4034,c	;volatile
  3610                           
  3611                           ;adc.c: 65: ADCON1 = 0x80;
  3612  001080  0E80               	movlw	128
  3613  001082  6EC1               	movwf	4033,c	;volatile
  3614                           
  3615                           ;adc.c: 68: ADCON2 = 0xAA;
  3616  001084  0EAA               	movlw	170
  3617  001086  6EC0               	movwf	4032,c	;volatile
  3618                           
  3619                           ; BSR set to: 15
  3620                           ;adc.c: 71: ADRESL = 0x00;
  3621  001088  6AC3               	clrf	4035,c	;volatile
  3622                           
  3623                           ; BSR set to: 15
  3624                           ;adc.c: 74: ADRESH = 0x00;
  3625  00108A  6AC4               	clrf	4036,c	;volatile
  3626                           
  3627                           ; BSR set to: 15
  3628  00108C  0012               	return		;funcret
  3629  00108E                     __end_of_ADC_Initialize:
  3630                           	opt stack 0
  3631                           tblptru	equ	0xFF8
  3632                           tblptrh	equ	0xFF7
  3633                           tblptrl	equ	0xFF6
  3634                           tablat	equ	0xFF5
  3635                           prodh	equ	0xFF4
  3636                           prodl	equ	0xFF3
  3637                           intcon	equ	0xFF2
  3638                           intcon2	equ	0xFF1
  3639                           postinc0	equ	0xFEE
  3640                           wreg	equ	0xFE8
  3641                           indf2	equ	0xFDF
  3642                           postinc2	equ	0xFDE
  3643                           postdec2	equ	0xFDD
  3644                           fsr2h	equ	0xFDA
  3645                           fsr2l	equ	0xFD9
  3646                           status	equ	0xFD8
  3647                           
  3648 ;; *************** function _INTERRUPT_InterruptManager *****************
  3649 ;; Defined at:
  3650 ;;		line 71 in file "mcc_generated_files/interrupt_manager.c"
  3651 ;; Parameters:    Size  Location     Type
  3652 ;;		None
  3653 ;; Auto vars:     Size  Location     Type
  3654 ;;		None
  3655 ;; Return value:  Size  Location     Type
  3656 ;;		None               void
  3657 ;; Registers used:
  3658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3659 ;; Tracked objects:
  3660 ;;		On entry : 0/0
  3661 ;;		On exit  : 0/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3664 ;;      Params:         0       0       0       0       0       0       0
  3665 ;;      Locals:         0       0       0       0       0       0       0
  3666 ;;      Temps:          2       0       0       0       0       0       0
  3667 ;;      Totals:         2       0       0       0       0       0       0
  3668 ;;Total ram usage:        2 bytes
  3669 ;; Hardware stack levels used:    1
  3670 ;; Hardware stack levels required when called:    2
  3671 ;; This function calls:
  3672 ;;		_EUSART1_Receive_ISR
  3673 ;;		_EUSART1_Transmit_ISR
  3674 ;;		_TMR0_ISR
  3675 ;; This function is called by:
  3676 ;;		Interrupt level 2
  3677 ;; This function uses a non-reentrant model
  3678 ;;
  3679                           
  3680                           	psect	intcode
  3681  000008                     __pintcode:
  3682                           	opt stack 0
  3683  000008                     _INTERRUPT_InterruptManager:
  3684                           	opt stack 24
  3685                           
  3686                           ; BSR set to: 15
  3687                           ;incstack = 0
  3688  000008  825B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3689  00000A  CFD9 F031          	movff	fsr2l,??_INTERRUPT_InterruptManager
  3690  00000E  CFDA F032          	movff	fsr2h,??_INTERRUPT_InterruptManager+1
  3691                           
  3692                           ;interrupt_manager.c: 73: if (INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
  3693  000012  BAF2               	btfsc	intcon,5,c	;volatile
  3694  000014  A4F2               	btfss	intcon,2,c	;volatile
  3695  000016  D003               	goto	i2l155
  3696                           
  3697                           ;interrupt_manager.c: 74: TMR0_ISR();
  3698  000018  ECD4  F007         	call	_TMR0_ISR	;wreg free
  3699                           
  3700                           ;interrupt_manager.c: 75: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
  3701  00001C  D00B               	goto	i2l161
  3702  00001E                     i2l155:
  3703  00001E  BA9D               	btfsc	3997,5,c	;volatile
  3704  000020  AA9E               	btfss	3998,5,c	;volatile
  3705  000022  D003               	goto	i2l157
  3706                           
  3707                           ;interrupt_manager.c: 76: EUSART1_Receive_ISR();
  3708  000024  ECF8  F007         	call	_EUSART1_Receive_ISR	;wreg free
  3709                           
  3710                           ;interrupt_manager.c: 77: } else if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
  3711  000028  D005               	goto	i2l161
  3712  00002A                     i2l157:
  3713  00002A  B89D               	btfsc	3997,4,c	;volatile
  3714  00002C  A89E               	btfss	3998,4,c	;volatile
  3715  00002E  D002               	goto	i2l161
  3716                           
  3717                           ;interrupt_manager.c: 78: EUSART1_Transmit_ISR();
  3718  000030  ECE6  F007         	call	_EUSART1_Transmit_ISR	;wreg free
  3719  000034                     i2l161:
  3720  000034  C032  FFDA         	movff	??_INTERRUPT_InterruptManager+1,fsr2h
  3721  000038  C031  FFD9         	movff	??_INTERRUPT_InterruptManager,fsr2l
  3722  00003C  925B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3723  00003E  0011               	retfie		f
  3724  000040                     __end_of_INTERRUPT_InterruptManager:
  3725                           	opt stack 0
  3726                           tblptru	equ	0xFF8
  3727                           tblptrh	equ	0xFF7
  3728                           tblptrl	equ	0xFF6
  3729                           tablat	equ	0xFF5
  3730                           prodh	equ	0xFF4
  3731                           prodl	equ	0xFF3
  3732                           intcon	equ	0xFF2
  3733                           intcon2	equ	0xFF1
  3734                           postinc0	equ	0xFEE
  3735                           wreg	equ	0xFE8
  3736                           indf2	equ	0xFDF
  3737                           postinc2	equ	0xFDE
  3738                           postdec2	equ	0xFDD
  3739                           fsr2h	equ	0xFDA
  3740                           fsr2l	equ	0xFD9
  3741                           status	equ	0xFD8
  3742                           
  3743 ;; *************** function _TMR0_ISR *****************
  3744 ;; Defined at:
  3745 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  3746 ;; Parameters:    Size  Location     Type
  3747 ;;		None
  3748 ;; Auto vars:     Size  Location     Type
  3749 ;;		None
  3750 ;; Return value:  Size  Location     Type
  3751 ;;		None               void
  3752 ;; Registers used:
  3753 ;;		wreg, status,2, status,0, cstack
  3754 ;; Tracked objects:
  3755 ;;		On entry : 0/0
  3756 ;;		On exit  : 0/0
  3757 ;;		Unchanged: 0/0
  3758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3759 ;;      Params:         0       0       0       0       0       0       0
  3760 ;;      Locals:         0       0       0       0       0       0       0
  3761 ;;      Temps:          0       0       0       0       0       0       0
  3762 ;;      Totals:         0       0       0       0       0       0       0
  3763 ;;Total ram usage:        0 bytes
  3764 ;; Hardware stack levels used:    1
  3765 ;; Hardware stack levels required when called:    1
  3766 ;; This function calls:
  3767 ;;		_TMR0_CallBack
  3768 ;; This function is called by:
  3769 ;;		_INTERRUPT_InterruptManager
  3770 ;; This function uses a non-reentrant model
  3771 ;;
  3772                           
  3773                           	psect	text23
  3774  000FA8                     __ptext23:
  3775                           	opt stack 0
  3776  000FA8                     _TMR0_ISR:
  3777                           	opt stack 24
  3778                           
  3779                           ;tmr0.c: 124: static volatile uint16_t CountCallBack = 0;
  3780                           ;tmr0.c: 127: INTCONbits.TMR0IF = 0;
  3781                           
  3782                           ;incstack = 0
  3783  000FA8  94F2               	bcf	intcon,2,c	;volatile
  3784                           
  3785                           ;tmr0.c: 131: TMR0H = timer0ReloadVal16bit >> 8;
  3786  000FAA  C059  FFD7         	movff	_timer0ReloadVal16bit+1,4055	;volatile
  3787                           
  3788                           ;tmr0.c: 132: TMR0L = (uint8_t) timer0ReloadVal16bit;
  3789  000FAE  C058  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  3790                           
  3791                           ;tmr0.c: 135: if (++CountCallBack >= 2) {
  3792  000FB2  4A11               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
  3793  000FB4  2A12               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
  3794  000FB6  5012               	movf	TMR0_ISR@CountCallBack+1,w,c	;volatile
  3795  000FB8  E104               	bnz	i2u92_40
  3796  000FBA  0E02               	movlw	2
  3797  000FBC  5C11               	subwf	TMR0_ISR@CountCallBack,w,c	;volatile
  3798  000FBE  A0D8               	btfss	status,0,c
  3799  000FC0  0012               	return	
  3800  000FC2                     i2u92_40:
  3801                           
  3802                           ;tmr0.c: 137: TMR0_CallBack();
  3803  000FC2  EC5D  F008         	call	_TMR0_CallBack	;wreg free
  3804                           
  3805                           ;tmr0.c: 140: CountCallBack = 0;
  3806  000FC6  6A11               	clrf	TMR0_ISR@CountCallBack,c	;volatile
  3807  000FC8  6A12               	clrf	TMR0_ISR@CountCallBack+1,c	;volatile
  3808  000FCA  0012               	return		;funcret
  3809  000FCC                     __end_of_TMR0_ISR:
  3810                           	opt stack 0
  3811                           tblptru	equ	0xFF8
  3812                           tblptrh	equ	0xFF7
  3813                           tblptrl	equ	0xFF6
  3814                           tablat	equ	0xFF5
  3815                           prodh	equ	0xFF4
  3816                           prodl	equ	0xFF3
  3817                           intcon	equ	0xFF2
  3818                           intcon2	equ	0xFF1
  3819                           postinc0	equ	0xFEE
  3820                           wreg	equ	0xFE8
  3821                           indf2	equ	0xFDF
  3822                           postinc2	equ	0xFDE
  3823                           postdec2	equ	0xFDD
  3824                           fsr2h	equ	0xFDA
  3825                           fsr2l	equ	0xFD9
  3826                           status	equ	0xFD8
  3827                           
  3828 ;; *************** function _TMR0_CallBack *****************
  3829 ;; Defined at:
  3830 ;;		line 148 in file "mcc_generated_files/tmr0.c"
  3831 ;; Parameters:    Size  Location     Type
  3832 ;;		None
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;		None
  3835 ;; Return value:  Size  Location     Type
  3836 ;;		None               void
  3837 ;; Registers used:
  3838 ;;		wreg, status,2
  3839 ;; Tracked objects:
  3840 ;;		On entry : 0/0
  3841 ;;		On exit  : 0/0
  3842 ;;		Unchanged: 0/0
  3843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3844 ;;      Params:         0       0       0       0       0       0       0
  3845 ;;      Locals:         0       0       0       0       0       0       0
  3846 ;;      Temps:          0       0       0       0       0       0       0
  3847 ;;      Totals:         0       0       0       0       0       0       0
  3848 ;;Total ram usage:        0 bytes
  3849 ;; Hardware stack levels used:    1
  3850 ;; This function calls:
  3851 ;;		Nothing
  3852 ;; This function is called by:
  3853 ;;		_TMR0_ISR
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           	psect	text24
  3858  0010BA                     __ptext24:
  3859                           	opt stack 0
  3860  0010BA                     _TMR0_CallBack:
  3861                           	opt stack 24
  3862                           
  3863                           ;tmr0.c: 150: TimerCallBackON = 1;
  3864                           
  3865                           ;incstack = 0
  3866  0010BA  0E01               	movlw	1
  3867  0010BC  6E15               	movwf	_TimerCallBackON,c	;volatile
  3868  0010BE  0C01               	retlw	1	;funcret
  3869  0010C0                     __end_of_TMR0_CallBack:
  3870                           	opt stack 0
  3871                           tblptru	equ	0xFF8
  3872                           tblptrh	equ	0xFF7
  3873                           tblptrl	equ	0xFF6
  3874                           tablat	equ	0xFF5
  3875                           prodh	equ	0xFF4
  3876                           prodl	equ	0xFF3
  3877                           intcon	equ	0xFF2
  3878                           intcon2	equ	0xFF1
  3879                           postinc0	equ	0xFEE
  3880                           wreg	equ	0xFE8
  3881                           indf2	equ	0xFDF
  3882                           postinc2	equ	0xFDE
  3883                           postdec2	equ	0xFDD
  3884                           fsr2h	equ	0xFDA
  3885                           fsr2l	equ	0xFD9
  3886                           status	equ	0xFD8
  3887                           
  3888 ;; *************** function _EUSART1_Transmit_ISR *****************
  3889 ;; Defined at:
  3890 ;;		line 156 in file "mcc_generated_files/eusart1.c"
  3891 ;; Parameters:    Size  Location     Type
  3892 ;;		None
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;		None
  3895 ;; Return value:  Size  Location     Type
  3896 ;;		None               void
  3897 ;; Registers used:
  3898 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3904 ;;      Params:         0       0       0       0       0       0       0
  3905 ;;      Locals:         0       0       0       0       0       0       0
  3906 ;;      Temps:          0       0       0       0       0       0       0
  3907 ;;      Totals:         0       0       0       0       0       0       0
  3908 ;;Total ram usage:        0 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; This function calls:
  3911 ;;		Nothing
  3912 ;; This function is called by:
  3913 ;;		_INTERRUPT_InterruptManager
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           	psect	text25
  3918  000FCC                     __ptext25:
  3919                           	opt stack 0
  3920  000FCC                     _EUSART1_Transmit_ISR:
  3921                           	opt stack 25
  3922                           
  3923                           ;eusart1.c: 159: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
  3924                           
  3925                           ;incstack = 0
  3926  000FCC  0E08               	movlw	8
  3927  000FCE  605A               	cpfslt	_eusart1TxBufferRemaining,c
  3928  000FD0  D00D               	goto	i2l123
  3929                           
  3930                           ;eusart1.c: 160: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  3931  000FD2  501B               	movf	_eusart1TxTail,w,c
  3932  000FD4  0F09               	addlw	low _eusart1TxBuffer
  3933  000FD6  6ED9               	movwf	fsr2l,c
  3934  000FD8  6ADA               	clrf	fsr2h,c
  3935  000FDA  50DF               	movf	indf2,w,c
  3936  000FDC  6EAD               	movwf	4013,c	;volatile
  3937  000FDE  2A1B               	incf	_eusart1TxTail,f,c
  3938                           
  3939                           ;eusart1.c: 161: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
  3940  000FE0  0E07               	movlw	7
  3941  000FE2  641B               	cpfsgt	_eusart1TxTail,c
  3942  000FE4  D001               	goto	i2l1602
  3943                           
  3944                           ;eusart1.c: 162: eusart1TxTail = 0;
  3945  000FE6  6A1B               	clrf	_eusart1TxTail,c
  3946  000FE8                     i2l1602:
  3947                           
  3948                           ;eusart1.c: 163: }
  3949                           ;eusart1.c: 164: eusart1TxBufferRemaining++;
  3950  000FE8  2A5A               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  3951                           
  3952                           ;eusart1.c: 165: } else {
  3953  000FEA  0012               	return	
  3954  000FEC                     i2l123:
  3955                           
  3956                           ;eusart1.c: 166: PIE1bits.TX1IE = 0;
  3957  000FEC  989D               	bcf	3997,4,c	;volatile
  3958  000FEE  0012               	return		;funcret
  3959  000FF0                     __end_of_EUSART1_Transmit_ISR:
  3960                           	opt stack 0
  3961                           tblptru	equ	0xFF8
  3962                           tblptrh	equ	0xFF7
  3963                           tblptrl	equ	0xFF6
  3964                           tablat	equ	0xFF5
  3965                           prodh	equ	0xFF4
  3966                           prodl	equ	0xFF3
  3967                           intcon	equ	0xFF2
  3968                           intcon2	equ	0xFF1
  3969                           postinc0	equ	0xFEE
  3970                           wreg	equ	0xFE8
  3971                           indf2	equ	0xFDF
  3972                           postinc2	equ	0xFDE
  3973                           postdec2	equ	0xFDD
  3974                           fsr2h	equ	0xFDA
  3975                           fsr2l	equ	0xFD9
  3976                           status	equ	0xFD8
  3977                           
  3978 ;; *************** function _EUSART1_Receive_ISR *****************
  3979 ;; Defined at:
  3980 ;;		line 170 in file "mcc_generated_files/eusart1.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;		None
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;		None
  3985 ;; Return value:  Size  Location     Type
  3986 ;;		None               void
  3987 ;; Registers used:
  3988 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3994 ;;      Params:         0       0       0       0       0       0       0
  3995 ;;      Locals:         0       0       0       0       0       0       0
  3996 ;;      Temps:          0       0       0       0       0       0       0
  3997 ;;      Totals:         0       0       0       0       0       0       0
  3998 ;;Total ram usage:        0 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; This function calls:
  4001 ;;		Nothing
  4002 ;; This function is called by:
  4003 ;;		_INTERRUPT_InterruptManager
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           	psect	text26
  4008  000FF0                     __ptext26:
  4009                           	opt stack 0
  4010  000FF0                     _EUSART1_Receive_ISR:
  4011                           	opt stack 25
  4012                           
  4013                           ;eusart1.c: 171: if (1 == RC1STAbits.OERR) {
  4014                           
  4015                           ;incstack = 0
  4016  000FF0  A2AB               	btfss	4011,1,c	;volatile
  4017  000FF2  D002               	goto	i2l1608
  4018                           
  4019                           ;eusart1.c: 174: RC1STAbits.CREN = 0;
  4020  000FF4  98AB               	bcf	4011,4,c	;volatile
  4021                           
  4022                           ;eusart1.c: 175: RC1STAbits.CREN = 1;
  4023  000FF6  88AB               	bsf	4011,4,c	;volatile
  4024  000FF8                     i2l1608:
  4025                           
  4026                           ;eusart1.c: 176: }
  4027                           ;eusart1.c: 179: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  4028  000FF8  5018               	movf	_eusart1RxHead,w,c
  4029  000FFA  0F01               	addlw	low _eusart1RxBuffer
  4030  000FFC  6ED9               	movwf	fsr2l,c
  4031  000FFE  6ADA               	clrf	fsr2h,c
  4032  001000  CFAE FFDF          	movff	4014,indf2	;volatile
  4033  001004  2A18               	incf	_eusart1RxHead,f,c
  4034                           
  4035                           ;eusart1.c: 180: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
  4036  001006  0E07               	movlw	7
  4037  001008  6418               	cpfsgt	_eusart1RxHead,c
  4038  00100A  D001               	goto	i2l1616
  4039                           
  4040                           ;eusart1.c: 181: eusart1RxHead = 0;
  4041  00100C  6A18               	clrf	_eusart1RxHead,c
  4042  00100E                     i2l1616:
  4043                           
  4044                           ;eusart1.c: 182: }
  4045                           ;eusart1.c: 183: eusart1RxCount++;
  4046  00100E  2A17               	incf	_eusart1RxCount,f,c	;volatile
  4047  001010  0012               	return		;funcret
  4048  001012                     __end_of_EUSART1_Receive_ISR:
  4049                           	opt stack 0
  4050                           tblptru	equ	0xFF8
  4051                           tblptrh	equ	0xFF7
  4052                           tblptrl	equ	0xFF6
  4053                           tablat	equ	0xFF5
  4054                           prodh	equ	0xFF4
  4055                           prodl	equ	0xFF3
  4056                           intcon	equ	0xFF2
  4057                           intcon2	equ	0xFF1
  4058                           postinc0	equ	0xFEE
  4059                           wreg	equ	0xFE8
  4060                           indf2	equ	0xFDF
  4061                           postinc2	equ	0xFDE
  4062                           postdec2	equ	0xFDD
  4063                           fsr2h	equ	0xFDA
  4064                           fsr2l	equ	0xFD9
  4065                           status	equ	0xFD8
  4066                           tblptru	equ	0xFF8
  4067                           tblptrh	equ	0xFF7
  4068                           tblptrl	equ	0xFF6
  4069                           tablat	equ	0xFF5
  4070                           prodh	equ	0xFF4
  4071                           prodl	equ	0xFF3
  4072                           intcon	equ	0xFF2
  4073                           intcon2	equ	0xFF1
  4074                           postinc0	equ	0xFEE
  4075                           wreg	equ	0xFE8
  4076                           indf2	equ	0xFDF
  4077                           postinc2	equ	0xFDE
  4078                           postdec2	equ	0xFDD
  4079                           fsr2h	equ	0xFDA
  4080                           fsr2l	equ	0xFD9
  4081                           status	equ	0xFD8
  4082                           
  4083                           	psect	rparam
  4084  0000                     tblptru	equ	0xFF8
  4085                           tblptrh	equ	0xFF7
  4086                           tblptrl	equ	0xFF6
  4087                           tablat	equ	0xFF5
  4088                           prodh	equ	0xFF4
  4089                           prodl	equ	0xFF3
  4090                           intcon	equ	0xFF2
  4091                           intcon2	equ	0xFF1
  4092                           postinc0	equ	0xFEE
  4093                           wreg	equ	0xFE8
  4094                           indf2	equ	0xFDF
  4095                           postinc2	equ	0xFDE
  4096                           postdec2	equ	0xFDD
  4097                           fsr2h	equ	0xFDA
  4098                           fsr2l	equ	0xFD9
  4099                           status	equ	0xFD8
  4100                           
  4101                           	psect	temp
  4102  00005B                     btemp:
  4103                           	opt stack 0
  4104  00005B                     	ds	1
  4105  0000                     int$flags	set	btemp
  4106                           tblptru	equ	0xFF8
  4107                           tblptrh	equ	0xFF7
  4108                           tblptrl	equ	0xFF6
  4109                           tablat	equ	0xFF5
  4110                           prodh	equ	0xFF4
  4111                           prodl	equ	0xFF3
  4112                           intcon	equ	0xFF2
  4113                           intcon2	equ	0xFF1
  4114                           postinc0	equ	0xFEE
  4115                           wreg	equ	0xFE8
  4116                           indf2	equ	0xFDF
  4117                           postinc2	equ	0xFDE
  4118                           postdec2	equ	0xFDD
  4119                           fsr2h	equ	0xFDA
  4120                           fsr2l	equ	0xFD9
  4121                           status	equ	0xFD8


Data Sizes:
    Strings     62
    Constant    30
    Data        0
    BSS         48
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     39      90
    BANK0           160      3       3
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    printf$999	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_4(CODE[17]), STR_3(CODE[17]), 

    printf@cp	PTR const unsigned char  size(1) Largest target is 1
		 -> printf@c(COMRAM[1]), 

    printf@f	PTR const unsigned char  size(1) Largest target is 15
		 -> STR_2(CODE[13]), STR_1(CODE[15]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    Pot	PTR volatile unsigned char  size(2) Largest target is 20
		 -> NULL(NULL[0]), dta(COMRAM[20]), 


Critical Paths under _main in COMRAM

    _app->_printf
    _printf->___lwmod
    _putch->_EUSART1_Write
    ___lwmod->___lwdiv

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_app

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5596
                  _SYSTEM_Initialize
                                _app
 ---------------------------------------------------------------------------------
 (1) _app                                                  3     3      0    5596
                                              0 BANK0      3     3      0
                  _ADC_GetConversion
                       _EUSART1_Read
                      _UART_Received
                            _delayMs
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              29    27      2    5185
                                             14 COMRAM    25    23      2
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              3 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART1_Write                                        1     1      0      62
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              2 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     386
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                              9 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     703
                                              2 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _delayMs                                              5     3      2     222
                                              2 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _UART_Received                                        3     3      0      66
                                              2 COMRAM     3     3      0
                          _processar
 ---------------------------------------------------------------------------------
 (3) _processar                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         1     1      0      24
                                              2 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      31
                                              2 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           2     2      0       0
                                              0 COMRAM     2     2      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _app
     _ADC_GetConversion
     _EUSART1_Read
     _UART_Received
       _processar
     _delayMs
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART1_Write

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR0_ISR
     _TMR0_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      3       3       4        1.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     27      5A       1       95.7%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5D       9        0.0%
DATA                 0      0      5D      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sat Jan 30 16:55:57 2016

           _eusart1TxBufferRemaining 005A                  ___wmul@multiplicand 0035  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                                l111 0EF4                                  l224 0DE4  
                                l232 0F78                                  l226 0DE8  
                                l307 0ECC                                  l411 0A84  
                                l403 09EC                                  l412 0A88  
                                l430 0B32                                  l414 0A9E  
                                l360 07B2                                  l409 0A5E  
                                l345 07A8                                  l329 0674  
                                l426 0BAC                                  l346 0774  
                                l363 07EC                                  l364 07F0  
                                l859 0E38                                  l869 0E76  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                                _Pot 0013                                  _app 0CCA  
                                _dta 001D                                  _aux 0016  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                               l2102 0EE6                                 l2200 0F84  
                               l2210 0FA0                                 l2114 0F0C  
                               l2140 0DEC                                 l2116 0F0E  
                               l2300 081A                                 l2220 0666  
                               l2150 1026                                 l2230 068A  
                               l2312 0854                                 l2304 082E  
                               l2320 0868                                 l2224 067E  
                               l2170 0E14                                 l2410 09F0  
                               l2306 0834                                 l2322 08A0  
                               l2242 06C4                                 l2250 071A  
                               l2226 0682                                 l2234 068E  
                               l2500 0C88                                 l2404 09C6  
                               l2316 0862                                 l2308 0846  
                               l2228 0686                                 l2166 0E08  
                               l2190 0E5A                                 l2422 0A62  
                               l2334 08CE                                 l2270 0778  
                               l2512 0F66                                 l2168 0E10  
                               l2504 0C9C                                 l2440 0AE0  
                               l2432 0AAA                                 l2416 0A22  
                               l2360 0920                                 l2344 08EE  
                               l2280 07B6                                 l2178 0E2E  
                               l2194 0E6C                                 l2186 0E4E  
                               l2450 0B04                                 l2346 08F2  
                               l2338 08E0                                 l2274 0794  
                               l2258 073E                                 l2524 0D5E  
                               l2188 0E56                                 l2444 0AEE  
                               l2372 094A                                 l2292 07F6  
                               l2276 07AC                                 l2508 0CAE  
                               ?_app 0031                                 l2534 0D8E  
                               l2454 0B0E                                 l2374 094E  
                               l2358 091C                                 l2390 098A  
                               l2294 07FC                                 l2286 07D8  
                               l2278 07B0                                 l2480 0BAE  
                               l2464 0B3C                                 l2296 080C  
                               l2482 0BEE                                 l2458 0B20  
                               l2394 099E                                 l2570 0D0E  
                               l2562 0CFA                                 l2492 0C3C  
                               l2476 0B9E                                 l2468 0B68  
                               l2388 0978                                 l2556 0CDC  
                               l2398 09B0                                 l2574 0D20  
                               l2496 0C70                                 l2498 0C82  
                               l2588 1096                                 STR_1 0641  
                               STR_2 0650                                 STR_3 061F  
                               STR_4 0630                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               _LATD 000F8C                                 _LATE 000F8D  
                               u2460 0A54                                 u2730 0D8C  
                               u2660 0C9C                                 u2790 0CDA  
                               u2877 0F6C                                 _WPUB 000F61  
                      _EUSART1_Write 0EE4                                 _flag 001C  
                               _main 108E                        ?_EUSART1_Read 0031  
                    _TMR0_StartTimer 10C0                                 fsr2h 000FDA  
                               indf2 000FDF                                 fsr2l 000FD9  
                               btemp 005B                        __CFG_BORV$190 000000  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0040                        __CFG_IESO$OFF 000000  
                       ___param_bank 000010                                ??_app 0058  
            __end_of_TMR0_Initialize 104A       __size_of_OSCILLATOR_Initialize 000C  
      __end_of_OSCILLATOR_Initialize 10A8                                ?_main 0031  
                              _T0CON 000FD5                                _LATD0 007C60  
                     __CFG_DEBUG$OFF 000000                      __end_of___lwdiv 0E42  
                    __end_of___lwmod 0E80                                i2l123 0FEC  
                              i2l161 0034                                i2l155 001E  
                              i2l157 002A                                _TMR0H 000FD7  
                              _TMR0L 000FD6                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                    __end_of_delayMs 0F84                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                 _EUSART1_Transmit_ISR 0FCC  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                     __end_of_TMR0_ISR 0FCC  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                       __CFG_EBTRB$OFF 000000  
                    __end_of_dpowers 0617                      __end_of_isdigit 102E  
                 __CFG_MCLRE$EXTMCLR 000000                                _putch 10B2  
                     ?_EUSART1_Write 0031                                tablat 000FF5  
                     ??_EUSART1_Read 0033                                status 000FD8  
                     __CFG_HFOFST$ON 000000                       __CFG_FOSC$HSMP 000000  
                    __initialization 104A           __end_of_EUSART1_Initialize 0F3A  
                       __end_of_main 109C          ?_INTERRUPT_InterruptManager 0031  
                             ??_main 0058                        __activetblptr 000002  
              ?_EUSART1_Transmit_ISR 0031              __end_of_TMR0_StartTimer 10C4  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                             _ADCON2 000FC0                               _ADRESH 000FC4  
                             _ADRESL 000FC3                               _ANSELA 000F38  
                             ?_putch 0031                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                               _RC1STA 000FAB  
                             i2l1602 0FE8                               i2l1616 100E  
                             i2l1608 0FF8                       __CFG_WDTEN$OFF 000000  
                             _RCREG1 000FAE                               _OSCCON 000FD3  
                             _SPBRG1 000FAF                               _TX1STA 000FAC  
                             _TXREG1 000FAD                       __CFG_XINST$OFF 000000  
                             ___wmul 0F3A                       __CFG_STVREN$ON 000000  
                          ??___lwdiv 0037                            ??___lwmod 003E  
                   ?_TMR0_Initialize 0031                               app@rec 0062  
                             clear_0 1050                            ??_delayMs 0035  
                             _printf 065E                            ??_isdigit 0033  
                       __mediumconst 0000                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
           ADC_GetConversion@channel 0037                __end_of_TMR0_CallBack 10C0  
                    ??_EUSART1_Write 0033                __end_of_UART_Received 0DA4  
                    _eusart1RxBuffer 0001        __size_of_INTERRUPT_Initialize 000A  
                    _eusart1TxBuffer 0009                    _SYSTEM_Initialize 1064  
                         __accesstop 0060              __end_of__initialization 1056  
                    __CFG_PBADEN$OFF 000000                   ?_SYSTEM_Initialize 0031  
                      ___rparam_used 000001                       __pcstackCOMRAM 0031  
                ??_SYSTEM_Initialize 0033                            ?_TMR0_ISR 0031  
                      __end_of_putch 10BA                 __end_of_EUSART1_Read 0FA8  
             ??_EUSART1_Transmit_ISR 0031                TMR0_ISR@CountCallBack 0011  
        __end_of_EUSART1_Receive_ISR 1012                     ?_TMR0_StartTimer 0031  
          __end_of_SYSTEM_Initialize 107C                              ??_putch 0034  
                      _eusart1RxHead 0018                        _eusart1TxHead 001A  
                      _eusart1RxTail 0019                        _eusart1TxTail 001B  
                    __CFG_PLLCFG$OFF 000000                           __pnvCOMRAM 0058  
                 __CFG_CCP2MX$PORTC1 000000                              ?___wmul 0033  
                         ??_TMR0_ISR 0031                   __CFG_CCP3MX$PORTB5 000000  
                            ?_printf 003F              __size_of_ADC_Initialize 0012  
                 __size_of_processar 0054                              _OSCCON2 000FD2  
                  __CFG_PRICLKEN$OFF 000000                              _OSCTUNE 000F9B  
                            _SPBRGH1 000FB0                              i2u92_40 0FC2  
                    __CFG_PWRTEN$OFF 000000                              __Hparam 0000  
                            __Lparam 0000                      __size_of___wmul 0026  
                            ___lwdiv 0DF8                              ___lwmod 0E42  
                       __psmallconst 0600                              __pcinit 104A  
                            _delayMs 0F60                              __ramtop 0600  
                            __ptext0 108E                              __ptext1 0CCA  
                            __ptext2 065E                              __ptext3 10B2  
                            __ptext4 0EE4                              __ptext5 1012  
                            __ptext6 0F3A                              __ptext7 0E42  
                            __ptext8 0DF8                              __ptext9 0F60  
                    __size_of_printf 066C                            _T0CONbits 000FD5  
                  __end_of_hexpowers 061F                              _dpowers 060D  
              _OSCILLATOR_Initialize 109C                         __size_of_app 007C  
                            _isdigit 1012                   _EUSART1_Initialize 0F12  
           ??_PIN_MANAGER_Initialize 0033           __size_of_SYSTEM_Initialize 0018  
               end_of_initialization 1056                    __end_of_octpowers 060D  
                ?_EUSART1_Initialize 0031                        __Lmediumconst 0000  
                  __end_of_processar 0DF8                              printf@c 0055  
                            printf@f 0051                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
              __size_of_EUSART1_Read 0024                           _printf$992 0046  
                         _printf$993 0048                           _printf$999 004B  
               ??_EUSART1_Initialize 0033                            _PORTBbits 000F81  
                EUSART1_Write@txData 0033                     UART_Received@rec 0035  
                        printf@width 0053                         _EUSART1_Read 0F84  
               _timer0ReloadVal16bit 0058         __end_of_INTERRUPT_Initialize 10B2  
                     __end_of___wmul 0F60                    __size_of_TMR0_ISR 0024  
                     _ADC_Initialize 107C               ?_OSCILLATOR_Initialize 0031  
                     __end_of_printf 0CCA                  start_initialization 104A  
                    _TimerCallBackON 0015             __size_of_TMR0_Initialize 001C  
    __size_of_PIN_MANAGER_Initialize 0034                          __end_of_app 0D46  
                        putch@txData 0034                __end_of_EUSART1_Write 0F12  
                           ??___wmul 0037               __size_of_TMR0_CallBack 0006  
             __end_of_ADC_Initialize 108E               __size_of_UART_Received 005E  
                           ??_printf 0041                       _eusart1RxCount 0017  
                        __pbssCOMRAM 0001        __size_of_EUSART1_Transmit_ISR 0024  
                      __pcstackBANK0 0060                         _isdigit$1223 0034  
       __size_of_EUSART1_Receive_ISR 0022             __size_of_TMR0_StartTimer 0004  
                   ___lwdiv@dividend 0033               _PIN_MANAGER_Initialize 0E80  
                          __pintcode 0008                             ?___lwdiv 0033  
                           ?___lwmod 003A                      ?_ADC_Initialize 0031  
                           ?_delayMs 0033         ??_INTERRUPT_InterruptManager 0031  
                           _BAUD1CON 000FB8                          __smallconst 0600  
                           ?_isdigit 0031                            app@adcRes 0060  
                          _hexpowers 0617                     ___lwdiv@quotient 0038  
                      _TMR0_CallBack 10BA                        _UART_Received 0D46  
                     __size_of_putch 0008                 _INTERRUPT_Initialize 10A8  
                  ??_TMR0_Initialize 0033                       ___wmul@product 0037  
                          _octpowers 0601                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D  __size_of_INTERRUPT_InterruptManager 0038  
                           _PIR1bits 000F9E                             _RCONbits 000FD0  
                   __CFG_WDTPS$32768 000000                             _TMR0_ISR 0FA8  
                          _processar 0DA4                           _ADCON0bits 000FC2  
                  ___wmul@multiplier 0033                           printf@flag 0056  
                         printf@prec 0052                       ?_TMR0_CallBack 0031  
                     ?_UART_Received 0031                          _INTCON2bits 000FF1  
              ?_INTERRUPT_Initialize 0031                EUSART1_Read@readValue 0033  
                           __Hrparam 0000                             __Lrparam 0000  
                  _ADC_GetConversion 0EB4                   __CFG_BOREN$SBORDIS 000000  
                  __CFG_P2BMX$PORTD2 000000              ??_OSCILLATOR_Initialize 0033  
                 ?_ADC_GetConversion 0033                    ??_TMR0_StartTimer 0033  
                         ?_processar 0031          __size_of_EUSART1_Initialize 0028  
                   __size_of___lwdiv 004A                     __size_of___lwmod 003E  
                   __size_of_delayMs 0024                  ??_ADC_GetConversion 0035  
                   __size_of_isdigit 001C                      ___lwdiv@divisor 0035  
                    ___lwdiv@counter 0037                             __ptext10 0D46  
                           __ptext11 0DA4                             __ptext20 0F12  
                           __ptext12 0F84                             __ptext21 107C  
                           __ptext13 0EB4                             __ptext14 1064  
                           __ptext23 0FA8                             __ptext15 102E  
                           __ptext24 10BA                             __ptext16 10C0  
                           __ptext25 0FCC                             __ptext17 0E80  
                           __ptext26 0FF0                             __ptext18 109C  
                           __ptext19 10A8                        __size_of_main 000E  
                           delayMs@i 0036            __end_of_ADC_GetConversion 0EE4  
                        delayMs@time 0033                           _RC1STAbits 000FAB  
                           int$flags 005B   __end_of_INTERRUPT_InterruptManager 0040  
         _INTERRUPT_InterruptManager 0008                            printf@idx 0045  
                          printf@len 004C                            printf@val 004F  
                _EUSART1_Receive_ISR 0FF0                           _INTCONbits 000FF2  
                    ??_TMR0_CallBack 0031                      ??_UART_Received 0033  
                           isdigit@c 0035               ??_INTERRUPT_Initialize 0033  
                           intlevel2 0000                 ?_EUSART1_Receive_ISR 0031  
                   ___lwmod@dividend 003A              ?_PIN_MANAGER_Initialize 0031  
       __end_of_EUSART1_Transmit_ISR 0FF0                     ??_ADC_Initialize 0033  
                           printf@ap 004E                             printf@cp 004A  
                        ??_processar 0033               __size_of_EUSART1_Write 002E  
                    ___lwmod@divisor 003C                      _TMR0_Initialize 102E  
                    ___lwmod@counter 003E                    __CFG_T3CMX$PORTC0 000000  
              ??_EUSART1_Receive_ISR 0031       __end_of_PIN_MANAGER_Initialize 0EB4  
         __size_of_ADC_GetConversion 0030  
